/**
 * SpecIF Web API
 * Web API for the Specification Integration Facility (SpecIF).
 *
 * OpenAPI spec version: v1.1
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("DataTypeApi", () => {
  let instance: api.DataTypeApi
  beforeEach(function() {
    instance = new api.DataTypeApi(config)
  });

  test("specifV11DataTypesGet", () => {
    return expect(instance.specifV11DataTypesGet({})).resolves.toBe(null)
  })
  test("specifV11DataTypesIdDelete", () => {
    const id: SpecifId = undefined
    const forced: boolean = true
    return expect(instance.specifV11DataTypesIdDelete(id, forced, {})).resolves.toBe(null)
  })
  test("specifV11DataTypesIdGet", () => {
    const id: SpecifId = undefined
    const revision: SpecifRevision = undefined
    return expect(instance.specifV11DataTypesIdGet(id, revision, {})).resolves.toBe(null)
  })
  test("specifV11DataTypesIdRevisionsGet", () => {
    const id: SpecifId = undefined
    return expect(instance.specifV11DataTypesIdRevisionsGet(id, {})).resolves.toBe(null)
  })
  test("specifV11DataTypesPost", () => {
    const body: api.SpecifDataType = undefined
    return expect(instance.specifV11DataTypesPost(body, {})).resolves.toBe(null)
  })
  test("specifV11DataTypesPut", () => {
    const body: api.SpecifDataType = undefined
    return expect(instance.specifV11DataTypesPut(body, {})).resolves.toBe(null)
  })
})

describe("FileApi", () => {
  let instance: api.FileApi
  beforeEach(function() {
    instance = new api.FileApi(config)
  });

  test("specifV11FilesGet", () => {
    const projectID: SpecifId = undefined
    return expect(instance.specifV11FilesGet(projectID, {})).resolves.toBe(null)
  })
  test("specifV11FilesIdDelete", () => {
    const id: SpecifId = undefined
    return expect(instance.specifV11FilesIdDelete(id, {})).resolves.toBe(null)
  })
  test("specifV11FilesIdGet", () => {
    const id: SpecifId = undefined
    const revision: SpecifRevision = undefined
    return expect(instance.specifV11FilesIdGet(id, revision, {})).resolves.toBe(null)
  })
  test("specifV11FilesIdRevisionsGet", () => {
    const id: SpecifId = undefined
    return expect(instance.specifV11FilesIdRevisionsGet(id, {})).resolves.toBe(null)
  })
  test("specifV11FilesPost", () => {
    const file: Blob = "file_example"
    return expect(instance.specifV11FilesPost(file, {})).resolves.toBe(null)
  })
  test("specifV11FilesPut", () => {
    const file: Blob = "file_example"
    return expect(instance.specifV11FilesPut(file, {})).resolves.toBe(null)
  })
})

describe("HierarchyApi", () => {
  let instance: api.HierarchyApi
  beforeEach(function() {
    instance = new api.HierarchyApi(config)
  });

  test("specifV11HierarchiesGet", () => {
    const project: string = "project_example"
    const rootNodesOnly: boolean = true
    return expect(instance.specifV11HierarchiesGet(project, rootNodesOnly, {})).resolves.toBe(null)
  })
  test("specifV11HierarchiesIdDelete", () => {
    const id: SpecifId = undefined
    return expect(instance.specifV11HierarchiesIdDelete(id, {})).resolves.toBe(null)
  })
  test("specifV11HierarchiesIdGet", () => {
    const id: SpecifId = undefined
    const revision: SpecifRevision = undefined
    const depth: SpecifHierarchyDepth = undefined
    return expect(instance.specifV11HierarchiesIdGet(id, revision, depth, {})).resolves.toBe(null)
  })
  test("specifV11HierarchiesIdRevisionsGet", () => {
    const id: SpecifId = undefined
    const depth: SpecifHierarchyDepth = undefined
    return expect(instance.specifV11HierarchiesIdRevisionsGet(id, depth, {})).resolves.toBe(null)
  })
  test("specifV11HierarchiesPost", () => {
    const body: api.SpecifNode = undefined
    const parent: string = "parent_example"
    const predecessor: string = "predecessor_example"
    const projectId: string = "projectId_example"
    return expect(instance.specifV11HierarchiesPost(body, parent, predecessor, projectId, {})).resolves.toBe(null)
  })
  test("specifV11HierarchiesPut", () => {
    const body: api.SpecifNode = undefined
    const parent: string = "parent_example"
    const predecessor: string = "predecessor_example"
    return expect(instance.specifV11HierarchiesPut(body, parent, predecessor, {})).resolves.toBe(null)
  })
})

describe("ProjectApi", () => {
  let instance: api.ProjectApi
  beforeEach(function() {
    instance = new api.ProjectApi(config)
  });

  test("specifV11ProjectsGet", () => {
    return expect(instance.specifV11ProjectsGet({})).resolves.toBe(null)
  })
  test("specifV11ProjectsIdDelete", () => {
    const id: SpecifId = undefined
    return expect(instance.specifV11ProjectsIdDelete(id, {})).resolves.toBe(null)
  })
  test("specifV11ProjectsIdGet", () => {
    const id: SpecifId = undefined
    const hierarchies: SpecifKeys = undefined
    const includeMetadata: boolean = true
    return expect(instance.specifV11ProjectsIdGet(id, hierarchies, includeMetadata, {})).resolves.toBe(null)
  })
  test("specifV11ProjectsPost", () => {
    const body: api.SpecIF = undefined
    return expect(instance.specifV11ProjectsPost(body, {})).resolves.toBe(null)
  })
  test("specifV11ProjectsPut", () => {
    const body: api.SpecIF = undefined
    return expect(instance.specifV11ProjectsPut(body, {})).resolves.toBe(null)
  })
})

describe("PropertyClassApi", () => {
  let instance: api.PropertyClassApi
  beforeEach(function() {
    instance = new api.PropertyClassApi(config)
  });

  test("specifV11PropertyClassesGet", () => {
    return expect(instance.specifV11PropertyClassesGet({})).resolves.toBe(null)
  })
  test("specifV11PropertyClassesIdDelete", () => {
    const id: SpecifId = undefined
    const forced: boolean = true
    return expect(instance.specifV11PropertyClassesIdDelete(id, forced, {})).resolves.toBe(null)
  })
  test("specifV11PropertyClassesIdGet", () => {
    const id: SpecifId = undefined
    const revision: SpecifRevision = undefined
    return expect(instance.specifV11PropertyClassesIdGet(id, revision, {})).resolves.toBe(null)
  })
  test("specifV11PropertyClassesIdRevisionsGet", () => {
    const id: SpecifId = undefined
    return expect(instance.specifV11PropertyClassesIdRevisionsGet(id, {})).resolves.toBe(null)
  })
  test("specifV11PropertyClassesPost", () => {
    const body: api.SpecifPropertyClass = undefined
    return expect(instance.specifV11PropertyClassesPost(body, {})).resolves.toBe(null)
  })
  test("specifV11PropertyClassesPut", () => {
    const body: api.SpecifPropertyClass = undefined
    const dataTypeID: string = "dataTypeID_example"
    const dataTypeRevision: string = "dataTypeRevision_example"
    const dataTypeDataSourceServiceName: string = "dataTypeDataSourceServiceName_example"
    const dataTypeDataSourceServiceAddress: string = "dataTypeDataSourceServiceAddress_example"
    const dataTypeDataSourceServicePort: number = 56
    const dataTypeDataSourceServiceDescription: string = "dataTypeDataSourceServiceDescription_example"
    const dataTypeDataSourceServiceNativeAccess: string = "dataTypeDataSourceServiceNativeAccess_example"
    const dataTypeDataSourceServiceKind: string = "dataTypeDataSourceServiceKind_example"
    const dataTypeDataSourceIconURL: string = "dataTypeDataSourceIconURL_example"
    const dataTypeDataSourceID: string = "dataTypeDataSourceID_example"
    const dataTypeDataSourceMetadataRead: boolean = true
    const dataTypeDataSourceMetadataWrite: boolean = true
    const dataTypeDataSourceDataRead: boolean = true
    const dataTypeDataSourceDataWrite: boolean = true
    const dataTypeDataSourceTags: Array<string> = undefined
    const multiple: boolean = true
    const format: string = "format_example"
    const unit: string = "unit_example"
    const values: Array<api.SpecifValue> = undefined
    const title: string = "title_example"
    const description: Array<api.SpecifMultiLanguageText> = undefined
    const projectID: string = "projectID_example"
    const changedAt: Date = 2013-10-20T19:20:30+01:00
    const changedBy: string = "changedBy_example"
    const id: string = "id_example"
    const iD: string = "iD_example"
    const revision: string = "revision_example"
    const replaces: Array<string> = undefined
    const dataSourceServiceName: string = "dataSourceServiceName_example"
    const dataSourceServiceAddress: string = "dataSourceServiceAddress_example"
    const dataSourceServicePort: number = 56
    const dataSourceServiceDescription: string = "dataSourceServiceDescription_example"
    const dataSourceServiceNativeAccess: string = "dataSourceServiceNativeAccess_example"
    const dataSourceServiceKind: string = "dataSourceServiceKind_example"
    const dataSourceIconURL: string = "dataSourceIconURL_example"
    const dataSourceID: string = "dataSourceID_example"
    const dataSourceMetadataRead: boolean = true
    const dataSourceMetadataWrite: boolean = true
    const dataSourceDataRead: boolean = true
    const dataSourceDataWrite: boolean = true
    const dataSourceTags: Array<string> = undefined
    return expect(instance.specifV11PropertyClassesPut(body, dataTypeID, dataTypeRevision, dataTypeDataSourceServiceName, dataTypeDataSourceServiceAddress, dataTypeDataSourceServicePort, dataTypeDataSourceServiceDescription, dataTypeDataSourceServiceNativeAccess, dataTypeDataSourceServiceKind, dataTypeDataSourceIconURL, dataTypeDataSourceID, dataTypeDataSourceMetadataRead, dataTypeDataSourceMetadataWrite, dataTypeDataSourceDataRead, dataTypeDataSourceDataWrite, dataTypeDataSourceTags, multiple, format, unit, values, title, description, projectID, changedAt, changedBy, id, iD, revision, replaces, dataSourceServiceName, dataSourceServiceAddress, dataSourceServicePort, dataSourceServiceDescription, dataSourceServiceNativeAccess, dataSourceServiceKind, dataSourceIconURL, dataSourceID, dataSourceMetadataRead, dataSourceMetadataWrite, dataSourceDataRead, dataSourceDataWrite, dataSourceTags, {})).resolves.toBe(null)
  })
})

describe("ResourceApi", () => {
  let instance: api.ResourceApi
  beforeEach(function() {
    instance = new api.ResourceApi(config)
  });

  test("specifV11ResourcesGet", () => {
    const projectID: string = "projectID_example"
    return expect(instance.specifV11ResourcesGet(projectID, {})).resolves.toBe(null)
  })
  test("specifV11ResourcesIdDelete", () => {
    const id: SpecifId = undefined
    const forced: boolean = true
    return expect(instance.specifV11ResourcesIdDelete(id, forced, {})).resolves.toBe(null)
  })
  test("specifV11ResourcesIdGet", () => {
    const id: SpecifId = undefined
    const revision: SpecifRevision = undefined
    return expect(instance.specifV11ResourcesIdGet(id, revision, {})).resolves.toBe(null)
  })
  test("specifV11ResourcesIdRevisionsGet", () => {
    const id: SpecifId = undefined
    return expect(instance.specifV11ResourcesIdRevisionsGet(id, {})).resolves.toBe(null)
  })
  test("specifV11ResourcesPost", () => {
    const body: api.SpecifResource = undefined
    return expect(instance.specifV11ResourcesPost(body, {})).resolves.toBe(null)
  })
  test("specifV11ResourcesPut", () => {
    const body: api.SpecifResource = undefined
    return expect(instance.specifV11ResourcesPut(body, {})).resolves.toBe(null)
  })
})

describe("ResourceClassApi", () => {
  let instance: api.ResourceClassApi
  beforeEach(function() {
    instance = new api.ResourceClassApi(config)
  });

  test("specifV11ResourceClassesGet", () => {
    return expect(instance.specifV11ResourceClassesGet({})).resolves.toBe(null)
  })
  test("specifV11ResourceClassesIdDelete", () => {
    const id: SpecifId = undefined
    const forced: boolean = true
    return expect(instance.specifV11ResourceClassesIdDelete(id, forced, {})).resolves.toBe(null)
  })
  test("specifV11ResourceClassesIdGet", () => {
    const id: SpecifId = undefined
    const revision: SpecifRevision = undefined
    return expect(instance.specifV11ResourceClassesIdGet(id, revision, {})).resolves.toBe(null)
  })
  test("specifV11ResourceClassesIdRevisionsGet", () => {
    const id: SpecifId = undefined
    return expect(instance.specifV11ResourceClassesIdRevisionsGet(id, {})).resolves.toBe(null)
  })
  test("specifV11ResourceClassesPost", () => {
    const body: api.SpecifResourceClass = undefined
    return expect(instance.specifV11ResourceClassesPost(body, {})).resolves.toBe(null)
  })
  test("specifV11ResourceClassesPut", () => {
    const body: api.SpecifResourceClass = undefined
    return expect(instance.specifV11ResourceClassesPut(body, {})).resolves.toBe(null)
  })
})

describe("StatementApi", () => {
  let instance: api.StatementApi
  beforeEach(function() {
    instance = new api.StatementApi(config)
  });

  test("specifV11StatementsGet", () => {
    const projectID: string = "projectID_example"
    const subjectID: string = "subjectID_example"
    const subjectRevision: string = "subjectRevision_example"
    const objectID: string = "objectID_example"
    const objectRevision: string = "objectRevision_example"
    return expect(instance.specifV11StatementsGet(projectID, subjectID, subjectRevision, objectID, objectRevision, {})).resolves.toBe(null)
  })
  test("specifV11StatementsIdDelete", () => {
    const id: SpecifId = undefined
    return expect(instance.specifV11StatementsIdDelete(id, {})).resolves.toBe(null)
  })
  test("specifV11StatementsIdGet", () => {
    const id: SpecifId = undefined
    const revision: SpecifRevision = undefined
    return expect(instance.specifV11StatementsIdGet(id, revision, {})).resolves.toBe(null)
  })
  test("specifV11StatementsIdRevisionsGet", () => {
    const id: SpecifId = undefined
    return expect(instance.specifV11StatementsIdRevisionsGet(id, {})).resolves.toBe(null)
  })
  test("specifV11StatementsPost", () => {
    const body: api.SpecifStatement = undefined
    return expect(instance.specifV11StatementsPost(body, {})).resolves.toBe(null)
  })
  test("specifV11StatementsPut", () => {
    const body: api.SpecifStatement = undefined
    return expect(instance.specifV11StatementsPut(body, {})).resolves.toBe(null)
  })
})

describe("StatementClassApi", () => {
  let instance: api.StatementClassApi
  beforeEach(function() {
    instance = new api.StatementClassApi(config)
  });

  test("specifV11StatementClassesGet", () => {
    return expect(instance.specifV11StatementClassesGet({})).resolves.toBe(null)
  })
  test("specifV11StatementClassesIdDelete", () => {
    const id: SpecifId = undefined
    const forced: boolean = true
    return expect(instance.specifV11StatementClassesIdDelete(id, forced, {})).resolves.toBe(null)
  })
  test("specifV11StatementClassesIdGet", () => {
    const id: SpecifId = undefined
    const revision: SpecifRevision = undefined
    return expect(instance.specifV11StatementClassesIdGet(id, revision, {})).resolves.toBe(null)
  })
  test("specifV11StatementClassesIdRevisionsGet", () => {
    const id: SpecifId = undefined
    return expect(instance.specifV11StatementClassesIdRevisionsGet(id, {})).resolves.toBe(null)
  })
  test("specifV11StatementClassesPost", () => {
    const body: api.SpecifStatementClass = undefined
    return expect(instance.specifV11StatementClassesPost(body, {})).resolves.toBe(null)
  })
  test("specifV11StatementClassesPut", () => {
    const body: api.SpecifStatementClass = undefined
    return expect(instance.specifV11StatementClassesPut(body, {})).resolves.toBe(null)
  })
})

