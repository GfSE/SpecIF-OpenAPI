swagger: '2.0'
info:
  version: v1.0
  title: SpecIF API
  description: Web API for the Specification Integration Facility (SpecIF).
  contact:
    name: The SpecIF team at Gesellschaft f√ºr Systems Engineering (GfSE) e.V.
    url: 'https://specif.de'
  license:
    name: Apache License 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0'
paths:
  '/specif/v1.0/projects':
    get:
      tags:
        - project
      summary: Return all projects; to limit the size only root properties are delivered.
      operationId: getAllProjects
      consumes: []
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: Success
          schema:
            uniqueItems: false
            type: array
            items:
              $ref: '#/definitions/project'
        '400':
          description: Bad Request
    post:
      tags:
        - project
      summary: Create a project with supplied elements; the supplied ID must be unique. If no ID is supplied, it is generated before insertion.
      operationId: createProject
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters: []
      responses:
        '201':
          description: Success
        '400':
          description: Bad Request
  '/specif/v1.0/projects/{id}':
    get:
      tags:
        - project
      summary: Return the project with the given ID; to limit the size only ??? are delivered.
      operationId: getProjectById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The project ID.
          required: true
          type: string
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
        '404':
          description: Not Found
    delete:
      tags:
        - project
      summary: Delete the project with all content; the supplied ID must exist.
      operationId: deleteProjectById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The project ID.
          required: true
          type: string
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
        '404':
          description: Not Found
  '/specif/v1.0/dataTypes':
    get:
      tags:
        - dataType
      summary: Return all data types.
      operationId: getAllDataTypes
      consumes: []
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: List of dataTypes suceessfully returned.
          schema:
            uniqueItems: false
            type: array
            items:
              $ref: '#/definitions/dataType'
        '400':
          description: Bad Request
    post:
      tags:
        - dataType
      summary: Create a data type; the supplied ID must be unique. If no ID is supplied, it is generated before insertion.
      operationId: createDataType
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters: []
      responses:
        '201':
          description: Success
        '400':
          description: Bad Request
    put:
      tags:
        - dataType
      summary: Update the data type; the supplied ID must exist.
      operationId: updateDataType
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
        '404':
          description: Not Found
  '/specif/v1.0/dataTypes/{id}':
    get:
      tags:
        - dataType
      summary: Return the data type with the given ID.
      operationId: getDataTypeById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The data type ID.
          required: true
          type: string
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
        '404':
          description: Not Found
    delete:
      tags:
        - dataType
      summary: Delete the data type; the supplied ID must exist. Return an error if there are depending model elements. ?mode=forced results in deleting all directly and indirectly depending model elements.
      operationId: deleteDataTypeById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The hierarchy ID.
          required: true
          type: string
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '901':
          description: Is Referenced
  /specif/v1.0/propertyClasses:
    get:
      tags:
        - propertyClass
      summary: Return all property classes.
      operationId: GetAllPropertyClasses
      consumes: []
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: Success
          schema:
            uniqueItems: false
            type: array
            items:
              $ref: '#/definitions/propertyClass'
        '400':
          description: Bad Request
    post:
      tags:
        - propertyClass
      summary: Create a property class; the supplied ID must be unique. If no ID is supplied, it is generated before insertion.
      operationId: createPropertyClass
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters: []
      responses:
        '201':
          description: Success
        '400':
          description: Bad Request
    put:
      tags:
        - propertyClass
      summary: Update the property class; the supplied ID must exist.
      operationId: updatePropertyClass
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
        '404':
          description: Not Found
  '/specif/v1.0/propertyClasses/{id}':
    get:
      tags:
        - propertyClass
      summary: Return the property class with the given ID.
      operationId: GetPropertyClassById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The property class ID.
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/propertyClass'
        '400':
          description: Bad Request
        '404':
          description: Not Found or No Permission
    delete:
      tags:
        - propertyClass
      summary: Delete the property class; the supplied ID must exist. Return an error if there are depending model elements. ?mode=forced results in deleting all directly and indirectly depending model elements.
      operationId: deletePropertyClassById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The property class ID.
          required: true
          type: string
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '901':
          description: Is Referenced
  /specif/v1.0/resourceClasses:
    get:
      tags:
        - resourceClass
      summary: Return all resource classes.
      operationId: GetAllResourceClasses
      consumes: []
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: Success
          schema:
            uniqueItems: false
            type: array
            items:
              $ref: '#/definitions/resourceClass'
        '400':
          description: Bad Request
    post:
      tags:
        - resourceClass
      summary: Create a resource class; the supplied ID must be unique. 
      operationId: createResourceClass
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters: []
      responses:
        '201':
          description: Success
        '400':
          description: Bad Request
    put:
      tags:
        - resourceClass
      summary: Update the resource class; the supplied ID must exist.
      operationId: updateResourceClass
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
        '404':
          description: Not Found
  '/specif/v1.0/resourceClasses/{id}':
    get:
      tags:
        - resourceClass
      summary: Return the resource class with the given ID.
      operationId: GetResourceClassById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The resource class ID.
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/resourceClass'
        '400':
          description: Bad Request
        '404':
          description: Not Found or No Permission
    delete:
      tags:
        - resourceClass
      summary: Delete the resource class; the supplied ID must exist. Return an error if there are depending model elements. ?mode=forced results in deleting all directly and indirectly depending model elements.
      operationId: deleteResourceClassById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The resource class ID.
          required: true
          type: string
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '901':
          description: Is Referenced
  /specif/v1.0/statementClass:
    get:
      tags:
        - statementClass
      summary: Return all statement classes.
      operationId: GetAllStatementClasses
      consumes: []
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: Success
          schema:
            uniqueItems: false
            type: array
            items:
              $ref: '#/definitions/statementClass'
        '400':
          description: Bad Request
    post:
      tags:
        - statementClass
      summary: Create a statement class; the supplied ID must be unique. 
      operationId: createStatementClass
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters: []
      responses:
        '201':
          description: Success
        '400':
          description: Bad Request
    put:
      tags:
        - statementClass
      summary: Update the statement class; the supplied ID must exist.
      operationId: updateStatementClass
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
        '404':
          description: Not Found
  '/specif/v1.0/statementClasses/{id}':
    get:
      tags:
        - statementClass
      summary: Return the statement class with the given ID.
      operationId: GetStatementClassById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The statement class ID.
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/statementClass'
        '400':
          description: Bad Request
        '404':
          description: Not Found or No Permission
    delete:
      tags:
        - statementClass
      summary: Delete the statement class; the supplied ID must exist. Return an error if there are depending model elements. ?mode=forced results in deleting all directly and indirectly depending model elements.
      operationId: deleteStatementClassById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The statement class ID.
          required: true
          type: string
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '901':
          description: Is Referenced
  /specif/v1.0/resources:
    get:
      tags:
        - resource
      summary: Return all resources.
      operationId: GetAllResources
      consumes: []
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: Success
          schema:
            uniqueItems: false
            type: array
            items:
              $ref: '#/definitions/resource'
        '400':
          description: Bad Request
    post:
      tags:
        - resource
      summary: Create a resource; the supplied ID must be unique. 
      operationId: createResource
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters: []
      responses:
        '201':
          description: Success
        '400':
          description: Bad Request
    put:
      tags:
        - resource
      summary: Update the resource; the supplied ID must exist.
      operationId: updateResource
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
        '404':
          description: Not Found
  '/specif/v1.0/resources/{id}':
    get:
      tags:
        - resource
      summary: Return the resource with the given ID.
      operationId: GetResourceById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The resource ID.
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/resource'
        '400':
          description: Bad Request
        '404':
          description: Not Found or No Permission
    delete:
      tags:
        - resource
      summary: Delete the resource; the supplied ID must exist. Return an error if there are depending model elements. ?mode=forced results in deleting all directly and indirectly depending model elements.
      operationId: deleteResourceById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The resource ID.
          required: true
          type: string
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '901':
          description: Is Referenced
  /specif/v1.0/statements:
    get:
      tags:
        - statement
      summary: Return all statements.
      operationId: GetAllStatements
      consumes: []
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: Success
          schema:
            uniqueItems: false
            type: array
            items:
              $ref: '#/definitions/statement'
        '400':
          description: Bad Request
    post:
      tags:
        - statement
      summary: Create a statement; the supplied ID must be unique. 
      operationId: createStatement
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters: []
      responses:
        '201':
          description: Success
        '400':
          description: Bad Request
    put:
      tags:
        - statement
      summary: Update the statement; the supplied ID must exist.
      operationId: updateStatement
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
        '404':
          description: Not Found
  '/specif/v1.0/statements/{id}':
    get:
      tags:
        - statement
      summary: Return the statement with the given ID.
      operationId: GetStatementById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The statement ID.
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/statement'
        '400':
          description: Bad Request
        '404':
          description: Not Found or No Permission
    delete:
      tags:
        - statement
      summary: Delete the statement; the supplied ID must exist.
      operationId: deleteStatementById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The statement ID.
          required: true
          type: string
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
        '404':
          description: Not Found
  '/specif/v1.0/hierarchies':
    get:
      tags:
        - hierarchy
      summary: Get all hierarchies (root-nodes) without their sub-trees (nodes).
      operationId: getAllHierarchies
      consumes: []
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: Success
          schema:
            uniqueItems: false
            type: array
            items:
              $ref: '#/definitions/node'
        '400':
          description: Bad Request
        '404':
          description: Not Found
    post:
      tags:
        - hierarchy
      summary: Create a hierarchy (sub-tree) with supplied nodes; the supplied ID must be unique. If no ID is supplied, it is generated before insertion. Query ?parent=nodeId - the sub-tree will be inserted as first child; query ?predecessor=nodeId - the sub-tree will be inserted after the specified node; no query - the sub-tree will be inserted as first element at root level.
      operationId: createHierarchy
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters: []
      responses:
        '201':
          description: Success
        '400':
          description: Bad Request
        '404':
          description: Not Found
    put:
      tags:
        - hierarchy
      summary: Update an existing hierarchy (sub-tree) with supplied nodes; the supplied ID must exist somewhere in any hierarchy. Query ?parent=nodeId - the sub-tree will be moved and inserted as first child; query ?predecessor=nodeId - the sub-tree will be moved and inserted after the specified node.
      operationId: updateHierarchy
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
        '404':
          description: Not Found
  '/specif/v1.0/hierarchies/{id}':
    get:
      tags:
        - hierarchy
      summary: Get hierarchy (sub-tree) with all nodes; the supplied ID must exist somewhere in any hierarchy.
      operationId: getHierarchyById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The hierarchy ID.
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/node'
        '400':
          description: Bad Request
        '404':
          description: Not Found
    delete:
      tags:
        - hierarchy
      summary: Delete hierarchy (sub-tree) with all nodes; the supplied ID must exist somewhere in any hierarchy.
      operationId: deleteHierarchyById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The hierarchy ID.
          required: true
          type: string
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
        '404':
          description: Not Found
  /specif/v1.0/files:
    get:
      tags:
        - file
      summary: Return all files.
      operationId: GetAllFiles
      consumes: []
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: Success
          schema:
            uniqueItems: false
            type: array
            items:
              $ref: '#/definitions/file'
        '400':
          description: Bad Request
    post:
      tags:
        - file
      summary: Create a file; the supplied ID must be unique. 
      operationId: createFile
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters: []
      responses:
        '201':
          description: Success
        '400':
          description: Bad Request
    put:
      tags:
        - file
      summary: Update the file; the supplied ID must exist.
      operationId: updateFile
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
        '404':
          description: Not Found
  '/specif/v1.0/files/{id}':
    get:
      tags:
        - file
      summary: Return the file with the given ID.
      operationId: GetFileById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The file ID.
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/file'
        '400':
          description: Bad Request
        '404':
          description: Not Found or No Permission
    delete:
      tags:
        - file
      summary: Delete the file; the supplied ID must exist. Return an error if there are depending model elements. ?mode=forced results in deleting all directly and indirectly depending model elements.
      operationId: deleteFileById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The file ID.
          required: true
          type: string
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '901':
          description: Is Referenced
definitions:
  project:
    type: object
    properties:
      id:
        type: string
      isExtension:
        type: boolean  
      changedAt:
        format: date-time
        type: string
  dataType:
    type: object
    properties:
      id:
        type: string
      revision:
        $ref: '#/definitions/revison'
      replaces:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/revison'
      title:
        $ref: '#/definitions/value'
      description:
        $ref: '#/definitions/value'
      type:
        type: string
      maxLength:
        format: int32
        type: integer
      accuracy:
        format: int32
        type: integer
      min:
        format: int32
        type: integer
      max:
        format: int32
        type: integer
      values:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/enumValue'
      multiple:
        type: boolean
      changedAt:
        format: date-time
        type: string
      changedBy:
        type: string
  revison:
    type: object
    properties: {}
  value:
    type: object
    properties:
      languageValues:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/languageValue'
  enumValue:
    type: object
    properties:
      id:
        type: string
      title:
        $ref: '#/definitions/value'
  languageValue:
    type: object
    properties:
      text:
        type: string
      language:
        type: string
  node:
    type: object
    properties:
      id:
        type: string
      revision:
        $ref: '#/definitions/revison'
      replaces:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/revison'
      title:
        $ref: '#/definitions/value'
      description:
        $ref: '#/definitions/value'
      resource:
        type: object
      nodes:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/node'
      changedAt:
        format: date-time
        type: string
      changedBy:
        type: string
  propertyClass:
    type: object
    properties:
      id:
        type: string
      revision:
        $ref: '#/definitions/revison'
      replaces:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/revison'
      title:
        $ref: '#/definitions/value'
      description:
        $ref: '#/definitions/value'
      dataType:
        $ref: '#/definitions/key'
      multiple:
        type: boolean
      changedAt:
        format: date-time
        type: string
      changedBy:
        type: string
  key:
    type: object
    properties:
      id:
        type: string
      revision:
        $ref: '#/definitions/revison'
  statementClass:
    type: object
    properties:
      id:
        type: string
      revision:
        $ref: '#/definitions/revison'
      replaces:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/revison'
      title:
        $ref: '#/definitions/value'
      description:
        $ref: '#/definitions/value'
      extends:
        $ref: '#/definitions/key'
      icon:
        type: string
      instantiation:
        uniqueItems: false
        type: array
        items:
          type: string
      propertyClasses:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/key'
      subjectClasses:
        uniqueItems: false
        type: array
        items:
          type: string
      objectClasses:
        uniqueItems: false
        type: array
        items:
          type: string
      changedAt:
        format: date-time
        type: string
      changedBy:
        type: string
  resource:
    type: object
    properties:
      id:
        type: string
      revision:
        $ref: '#/definitions/revison'
      replaces:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/revison'
      title:
        $ref: '#/definitions/value'
      class:
        $ref: '#/definitions/key'
      description:
        $ref: '#/definitions/value'
      properties:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/property'
      changedAt:
        format: date-time
        type: string
      changedBy:
        type: string
  property:
    type: object
    properties:
      id:
        type: string
      revision:
        $ref: '#/definitions/revison'
      replaces:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/revison'
      title:
        $ref: '#/definitions/value'
      value:
        $ref: '#/definitions/value'
      description:
        $ref: '#/definitions/value'
      class:
        $ref: '#/definitions/key'
      changedAt:
        format: date-time
        type: string
      changedBy:
        type: string
  resourceClass:
    type: object
    properties:
      id:
        type: string
      revision:
        $ref: '#/definitions/revison'
      replaces:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/revison'
      title:
        $ref: '#/definitions/value'
      description:
        $ref: '#/definitions/value'
      extends:
        $ref: '#/definitions/key'
      icon:
        type: string
      isHeading:
        type: boolean
      instantiation:
        uniqueItems: false
        type: array
        items:
          type: string
      propertyClasses:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/key'
      changedAt:
        format: date-time
        type: string
      changedBy:
        type: string
  statement:
    type: object
    properties:
      id:
        type: string
      revision:
        $ref: '#/definitions/revison'
      replaces:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/revison'
      title:
        $ref: '#/definitions/value'
      class:
        $ref: '#/definitions/key'
      description:
        $ref: '#/definitions/value'
      subject:
        $ref: '#/definitions/key'
      object:
        $ref: '#/definitions/key'
      properties:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/property'
      changedAt:
        format: date-time
        type: string
      changedBy:
        type: string
  file:
    type: object
    properties:
      id:
        type: string
      revision:
        $ref: '#/definitions/revison'
      replaces:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/revison'
      title:
        $ref: '#/definitions/value'
      description:
        $ref: '#/definitions/value'
      type:
        $ref: '#/definitions/value'
      changedAt:
        format: date-time
        type: string
      changedBy:
        type: string
tags: []
