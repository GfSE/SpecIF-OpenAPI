swagger: '2.0'
info:
  version: v1.0
  title: SpecIF API
  description: Web API for the Specification Integration Facility (SpecIF).
  contact:
    name: The SpecIF team at Gesellschaft f√ºr Systems Engineering (GfSE) e.V.
    url: 'https://specif.de'
  license:
    name: Apache License 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0'
paths:
  /specif/v1.0/dataTypes:
    get:
      tags:
        - DataType
      summary: Returns all data types with all available revisions.
      operationId: GetAllDataTypes
      consumes: []
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: List of data types suceessfull returned.
          schema:
            uniqueItems: false
            type: array
            items:
              $ref: '#/definitions/DataType'
    put:
      tags:
        - DataType
      summary: Update the data type; the supplied ID must exist.
      operationId: UpdateDataType
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters:
        - name: dataType
          in: body
          description: The data type data.
          required: false
          schema:
            $ref: '#/definitions/DataType'
      responses:
        '200':
          description: Success
    post:
      tags:
        - DataType
      summary: Create a data type.
      operationId: CreateDataType
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters:
        - name: dataType
          in: body
          description: The data type to create.
          required: false
          schema:
            $ref: '#/definitions/DataType'
      responses:
        '200':
          description: Success
  '/specif/v1.0/dataTypes/{id}':
    get:
      tags:
        - DataType
      summary: Returns a data type with the given ID.
      operationId: GetDataTypeById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The data type ID.
          required: true
          type: string
        - name: revision
          in: query
          description: The data type revision id.
          required: false
          type: string
      responses:
        '400':
          description: Bad Request
        '404':
          description: Not Found
    delete:
      tags:
        - DataType
      summary: "Delete the data type; the supplied ID must exist. \r\nReturn an error if there are depending model elements."
      operationId: DeleteDataType
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          type: string
        - name: revision
          in: query
          description: ''
          required: false
          type: string
        - name: mode
          in: query
          description: Delete mode. ?mode=forced results in deleting all directly and indirectly depending model elements.
          required: false
          type: string
      responses:
        '200':
          description: Success
  '/specif/v1.0/dataTypes/{id}/allRevisions':
    get:
      tags:
        - DataType
      summary: Returns all data type revisions for the given id.
      operationId: GetAllDatatypeRevisions
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            uniqueItems: false
            type: array
            items:
              $ref: '#/definitions/DataType'
  /specif/v1.0/hierarchies:
    get:
      tags:
        - Hierarchy
      summary: Get all hierarchies.
      operationId: GetAllHierarchies
      consumes: []
      produces:
        - application/json
      parameters:
        - name: project
          in: query
          required: false
          type: string
        - name: rootNodesOnly
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Success
          schema:
            uniqueItems: false
            type: array
            items:
              $ref: '#/definitions/Node'
    put:
      tags:
        - Hierarchy
      summary: Update an existing hierarchy node.
      operationId: UpdateHierarchy
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters:
        - name: node
          in: body
          description: ''
          required: false
          schema:
            $ref: '#/definitions/Node'
      responses:
        '200':
          description: Success
    post:
      tags:
        - Hierarchy
      summary: Add a new hierarchy.
      operationId: CreateNewHierarchy
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters:
        - name: node
          in: body
          description: The hierarchy data to add.
          required: false
          schema:
            $ref: '#/definitions/Node'
        - name: parentNodeId
          in: query
          description: An optional parent node id.
          required: false
          type: string
      responses:
        '200':
          description: Success
  '/specif/v1.0/hierarchies/{id}':
    get:
      tags:
        - Hierarchy
      summary: Get hierarchy with a specific ID.
      operationId: GetHierarchyById
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The hierarchy ID.
          required: true
          type: string
        - name: revision
          in: query
          description: The hierarchy revision.
          required: false
          type: string
        - name: depth
          in: body
          description: The maximum depth of child nodes to return. If not set the complete hierarchy depth is returned.
          required: false
          schema:
            format: int32
            type: integer
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Node'
    delete:
      tags:
        - Hierarchy
      summary: Delete a hierarchy.
      operationId: DeleteHierarchy
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          type: string
        - name: revision
          in: query
          description: ''
          required: false
          type: string
      responses:
        '200':
          description: Success
  '/specif/v1.0/hierarchies/{id}/allRevisions':
    get:
      tags:
        - Hierarchy
      summary: Get all revisions from a hierarchy with a specific ID.
      operationId: GetAllHierarchyRevisions
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The hierarchy ID.
          required: true
          type: string
        - name: depth
          in: body
          description: The maximum depth of child nodes to return. If not set the complete hierarchy depth is returned.
          required: false
          schema:
            format: int32
            type: integer
      responses:
        '200':
          description: Success
          schema:
            uniqueItems: false
            type: array
            items:
              $ref: '#/definitions/Node'
  /specif/v1.0/hierarchies/move:
    put:
      tags:
        - Hierarchy
      summary: Moves an existion node and all child nodes to a new parent.
      operationId: MoveNode
      consumes: []
      produces:
        - application/json
      parameters:
        - name: nodeId
          in: query
          description: The id of the node to move.
          required: false
          type: string
        - name: newParentId
          in: query
          description: The id of the new parent.
          required: false
          type: string
        - name: newSiblingId
          in: query
          description: "The id of the new sibling. \r\n            If nothing is set the node will be the first element in the new location list."
          required: false
          type: string
      responses:
        '200':
          description: Success
  /specif/v1.0/primitiveTypes:
    get:
      tags:
        - PrimitiveTypes
      summary: Returns a list with the names of the available primitive types.
      operationId: GetPrimitiveTypeList
      consumes: []
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: List of primitive types suceessfull returned.
          schema:
            uniqueItems: false
            type: array
            items:
              type: string
  /specif/v1.0/projects:
    get:
      tags:
        - Project
      summary: Return all projects; to limit the size only root properties are delivered.
      operationId: GetAllProjects
      consumes: []
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: Success
          schema:
            uniqueItems: false
            type: array
            items:
              $ref: '#/definitions/ProjectDescriptor'
    post:
      tags:
        - Project
      summary: "Create a project with supplied elements; the supplied ID must be unique in the project scope. \r\nIf no ID is supplied, it is generated before insertion."
      operationId: CreateNewProject
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters:
        - name: value
          in: body
          description: The SpecIF data defining the project.
          required: false
          schema:
            $ref: '#/definitions/SpecIF'
      responses:
        '200':
          description: Success
  '/specif/v1.0/projects/{id}':
    get:
      tags:
        - Project
      summary: Return the project with the given ID; to limit the size only ??? are delivered.
      operationId: GetProjectByID
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The project id.
          required: true
          type: string
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/SpecIF'
    put:
      tags:
        - Project
      summary: Update a project with the gibven ID by including the data into an existing project. The project with the supplied ID must exist.
      operationId: UpdateProject
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The project ID.
          required: true
          type: string
        - name: value
          in: body
          description: The SpecIF data to include.
          required: false
          schema:
            $ref: '#/definitions/SpecIF'
      responses:
        '200':
          description: Success
    delete:
      tags:
        - Project
      summary: Delete a project with the given ID.
      operationId: DeleteProject
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: Th ID of the project to delete.
          required: true
          type: string
      responses:
        '200':
          description: Success
  /specif/v1.0/propertyClasses:
    get:
      tags:
        - PropertyClass
      summary: Returns all property classes with alll available revisions.
      operationId: GetAllPropertyClasses
      consumes: []
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: Success
          schema:
            uniqueItems: false
            type: array
            items:
              $ref: '#/definitions/PropertyClass'
        '400':
          description: Bad Request
  '/specif/v1.0/propertyClasses/{id}':
    get:
      tags:
        - PropertyClass
      summary: Returns the property class with the given ID.
      operationId: GetPropertyClassById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The property class ID.
          required: true
          type: string
        - name: revision
          in: query
          description: The property class revsion.
          required: false
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/PropertyClass'
        '400':
          description: Bad Request
        '404':
          description: Not Found
    put:
      tags:
        - PropertyClass
      summary: Update the property class; the supplied ID must exist.
      operationId: UpdatePropertyClass
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The property class ID.
          required: true
          type: string
        - name: revision
          in: query
          description: The property class revision.
          required: false
          type: string
      responses:
        '200':
          description: Success
    delete:
      tags:
        - PropertyClass
      summary: "Delete the property class; the supplied ID must exist. \r\nReturn an error if there are depending model elements."
      operationId: DeletePropertyClass
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The property class ID.
          required: true
          type: string
        - name: revision
          in: query
          description: The property class revision.
          required: false
          type: string
        - name: mode
          in: query
          description: Delete mode. ?mode=forced results in deleting all directly and indirectly depending model elements.
          required: false
          type: string
      responses:
        '200':
          description: Success
  '/specif/v1.0/propertyClasses/{id}/allRevisions':
    get:
      tags:
        - PropertyClass
      summary: Returns all property class revisions for the given id.
      operationId: GetAllPropertyClassRevisions
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            uniqueItems: false
            type: array
            items:
              $ref: '#/definitions/PropertyClass'
  /specif/v1.0/resources:
    get:
      tags:
        - Resource
      summary: Returns all resources with all available revisions.
      operationId: GetAllResources
      consumes: []
      produces:
        - application/json
      parameters:
        - name: projectID
          in: query
          description: An optional project ID. The endpount then returns only resources for the given project.
          required: false
          type: string
      responses:
        '200':
          description: Success
          schema:
            uniqueItems: false
            type: array
            items:
              $ref: '#/definitions/Resource'
    put:
      tags:
        - Resource
      summary: Update a resource. The ID included in the reource data must exist.
      operationId: UpdateResource
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters:
        - name: resource
          in: body
          description: ''
          required: false
          schema:
            $ref: '#/definitions/Resource'
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/Resource'
    post:
      tags:
        - Resource
      summary: Adds a new resource to the SpecIF repository.
      operationId: AddNewResource
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters:
        - name: resource
          in: body
          description: ''
          required: false
          schema:
            $ref: '#/definitions/Resource'
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/Resource'
  '/specif/v1.0/resources/{id}':
    get:
      tags:
        - Resource
      summary: Returns the latest version of the resource with the given ID.
      operationId: GetResourceById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The resource ID.
          required: true
          type: string
        - name: revision
          in: query
          description: The resource revision.
          required: false
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Resource'
    delete:
      tags:
        - Resource
      summary: Delete the resource.
      operationId: DeleteResource
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The resource ID.
          required: true
          type: string
        - name: revision
          in: query
          description: The resource revision.
          required: false
          type: string
        - name: mode
          in: query
          description: '?mode=forced results in deleting all directly and indirectly depending model elements.'
          required: false
          type: string
      responses:
        '200':
          description: Success
  '/specif/v1.0/resources/{id}/allRevisions':
    get:
      tags:
        - Resource
      summary: Returns a list of all revisions for the resource with the given ID.
      operationId: GetAllResourceRevisions
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The resource ID.
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            uniqueItems: false
            type: array
            items:
              $ref: '#/definitions/Resource'
  /specif/v1.0/resourceClasses:
    get:
      tags:
        - ResourceClass
      summary: Returns all resource classes with all available revisions.
      operationId: GetAllResourceClasses
      consumes: []
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: Success
          schema:
            uniqueItems: false
            type: array
            items:
              $ref: '#/definitions/ResourceClass'
        '400':
          description: Bad Request
        '404':
          description: Not Found
    put:
      tags:
        - ResourceClass
      summary: "Update a resource class.\r\nThe subjected ID must exist."
      operationId: UpdateResourceClass
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters:
        - name: resourceClass
          in: body
          description: The statement class data.
          required: false
          schema:
            $ref: '#/definitions/Resource'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ResourceClass'
    post:
      tags:
        - ResourceClass
      summary: Create a new resource class.
      operationId: CreateResourceClass
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters:
        - name: resourceClass
          in: body
          description: The resource class data.
          required: false
          schema:
            $ref: '#/definitions/ResourceClass'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ResourceClass'
  '/specif/v1.0/resourceClasses/{id}':
    get:
      tags:
        - ResourceClass
      summary: Returns the resource class with the given ID.
      operationId: GetResourceClassById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The resource class ID.
          required: true
          type: string
        - name: revision
          in: query
          description: The resource class revision.
          required: false
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ResourceClass'
        '400':
          description: Bad Request
        '404':
          description: Not Found
    delete:
      tags:
        - ResourceClass
      summary: Delete a resource class with the given ID.
      operationId: DeleteResourceClass
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The resource class ID.
          required: true
          type: string
      responses:
        '200':
          description: Success
  '/specif/v1.0/resourceClasses/{id}/allRevisions':
    get:
      tags:
        - ResourceClass
      summary: Returns all resource class revisions for the given id.
      operationId: GetAllResourceClassRevisions
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            uniqueItems: false
            type: array
            items:
              $ref: '#/definitions/ResourceClass'
        '400':
          description: Bad Request
        '404':
          description: Not Found
  /specif/v1.0/statements:
    get:
      tags:
        - Statement
      summary: "Returns all statements with all available revisions.\r\nWith the optional project ID only the satatements for the project are returned."
      operationId: GetAllStatements
      consumes: []
      produces:
        - application/json
      parameters:
        - name: projectID
          in: query
          description: The project ID.
          required: false
          type: string
      responses:
        '200':
          description: Success
          schema:
            uniqueItems: false
            type: array
            items:
              $ref: '#/definitions/Statement'
    put:
      tags:
        - Statement
      summary: 'Update a new statement. If a statement with the given ID is still existant, a new revision is created automatically.'
      operationId: UpdateStatement
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters:
        - name: statemenet
          in: body
          description: The statement to update.
          required: false
          schema:
            $ref: '#/definitions/Statement'
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/Statement'
        '400':
          description: Bad Request
    post:
      tags:
        - Statement
      summary: Create a statement; the supplied ID must be unique in the project scope.
      operationId: CreateNewStatement
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters:
        - name: statemenet
          in: body
          description: The statement to create.
          required: false
          schema:
            $ref: '#/definitions/Statement'
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/Statement'
        '400':
          description: Bad Request
  '/specif/v1.0/statements/{id}':
    get:
      tags:
        - Statement
      summary: Returns the statement with the given ID.
      operationId: GetStatementById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The statement ID.
          required: true
          type: string
        - name: revision
          in: query
          description: The statement revision.
          required: false
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Statement'
    delete:
      tags:
        - Statement
      summary: Delete the statement; the supplied ID must exist. Return an error if there are depending model elements.
      operationId: DeleteStatement
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          type: string
        - name: revision
          in: query
          description: ''
          required: false
          type: string
        - name: mode
          in: query
          description: '?mode=forced results in deleting all directly and indirectly depending model elements.'
          required: false
          type: string
      responses:
        '200':
          description: Success
  '/specif/v1.0/statements/subject/{subjectId}':
    get:
      tags:
        - Statement
      summary: Returns all statements for the subject resource with the given ID and the given revision.
      operationId: GetStatementsBySubject
      consumes: []
      produces:
        - application/json
      parameters:
        - name: subjectId
          in: path
          description: ''
          required: true
          type: string
        - name: revision
          in: query
          description: The subject revision.
          required: false
          type: string
      responses:
        '200':
          description: Success
          schema:
            uniqueItems: false
            type: array
            items:
              $ref: '#/definitions/Statement'
        '400':
          description: Bad Request
        '404':
          description: Not Found
  '/specif/v1.0/statements/object/{objectId}':
    get:
      tags:
        - Statement
      summary: Returns all statements for the object resource with the given ID and the given object revision.
      operationId: GetStatementsByObject
      consumes: []
      produces:
        - application/json
      parameters:
        - name: objectId
          in: path
          description: ''
          required: true
          type: string
        - name: revision
          in: query
          description: The object revision.
          required: false
          type: string
      responses:
        '200':
          description: Success
          schema:
            uniqueItems: false
            type: array
            items:
              $ref: '#/definitions/Statement'
        '400':
          description: Bad Request
        '404':
          description: Not Found
  '/specif/v1.0/statements/resource/{resourceId}':
    get:
      tags:
        - Statement
      summary: Returns all statements for a resource with a given ID and main/latest revision - resource is uses as subject OR object for the statement.
      operationId: GetAllStatementsForResource
      consumes: []
      produces:
        - application/json
      parameters:
        - name: resourceId
          in: path
          description: The resource element ID.
          required: true
          type: string
        - name: revision
          in: query
          description: The resource revision.
          required: false
          type: string
      responses:
        '200':
          description: Success
          schema:
            uniqueItems: false
            type: array
            items:
              $ref: '#/definitions/Statement'
        '400':
          description: Bad Request
        '404':
          description: Not Found
  '/specif/v1.0/statements/{id}/allRevisions':
    get:
      tags:
        - Statement
      summary: Returns all available revisions for the statement wit the given ID.
      operationId: GetAllStatementRevisions
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The statement id.
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            uniqueItems: false
            type: array
            items:
              $ref: '#/definitions/Resource'
        '400':
          description: Bad Request
        '404':
          description: Not Found
  /specif/v1.0/statementClasses:
    get:
      tags:
        - StatementClass
      summary: Returns all statement classes with all available revisions.
      operationId: GetAllStatementClasses
      consumes: []
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: Success
          schema:
            uniqueItems: false
            type: array
            items:
              $ref: '#/definitions/Resource'
        '400':
          description: Bad Request
        '404':
          description: Not Found
    put:
      tags:
        - StatementClass
      summary: "Update a statement class.\r\nThe subjected ID must exist."
      operationId: UpdateStatementClass
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters:
        - name: statementClass
          in: body
          description: The statement class data.
          required: false
          schema:
            $ref: '#/definitions/Resource'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/StatementClass'
    post:
      tags:
        - StatementClass
      summary: Create a new statement class.
      operationId: CreateStatementClass
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters:
        - name: statementClass
          in: body
          description: The statement class data.
          required: false
          schema:
            $ref: '#/definitions/Resource'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/StatementClass'
  '/specif/v1.0/statementClasses/{id}':
    get:
      tags:
        - StatementClass
      summary: Returns the main/latest revision of the statement class with the given ID.
      operationId: GetStatementClassById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          type: string
        - name: revision
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/StatementClass'
        '400':
          description: Bad Request
        '404':
          description: Not Found
    delete:
      tags:
        - StatementClass
      summary: Delete a statement class with the given ID.
      operationId: DeleteStatementClass
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The statement class ID.
          required: true
          type: string
      responses:
        '200':
          description: Success
  '/specif/v1.0/statementClasses/{id}/allRevisions':
    get:
      tags:
        - StatementClass
      summary: Returns all statement class revisions for the given id.
      operationId: GetAllStatementClassRevisions
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            uniqueItems: false
            type: array
            items:
              $ref: '#/definitions/StatementClass'
definitions:
  DataType:
    type: object
    properties:
      id:
        type: string
      title:
        $ref: '#/definitions/Value'
      description:
        $ref: '#/definitions/Value'
      revision:
        type: string
      replaces:
        uniqueItems: false
        type: array
        items:
          type: string
      type:
        type: string
      maxLength:
        format: int32
        type: integer
      fractionDigits:
        format: int32
        type: integer
      minInclusive:
        format: int32
        type: integer
      maxInclusive:
        format: int32
        type: integer
      values:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/EnumValue'
      multiple:
        type: boolean
      changedAt:
        format: date-time
        type: string
      changedBy:
        type: string
  Value:
    type: object
    properties: {}
  EnumValue:
    type: object
    properties:
      id:
        type: string
      title:
        $ref: '#/definitions/Value'
  Node:
    type: object
    properties:
      id:
        type: string
      title:
        $ref: '#/definitions/Value'
      description:
        $ref: '#/definitions/Value'
      revision:
        type: string
      replaces:
        uniqueItems: false
        type: array
        items:
          type: string
      resource:
        type: object
      nodes:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/Node'
      changedAt:
        format: date-time
        type: string
      changedBy:
        type: string
  ProjectDescriptor:
    type: object
    properties:
      id:
        type: string
      changedAt:
        format: date-time
        type: string
  SpecIF:
    type: object
    properties:
      id:
        type: string
      title:
        $ref: '#/definitions/Value'
      description:
        $ref: '#/definitions/Value'
      isExtension:
        type: boolean
      specifVersion:
        type: string
      generator:
        type: string
      generatorVersion:
        type: string
      rights:
        $ref: '#/definitions/Rights'
      createdAt:
        format: date-time
        type: string
      createdBy:
        $ref: '#/definitions/Creator'
      dataTypes:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/DataType'
      propertyClasses:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/PropertyClass'
      resourceClasses:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/ResourceClass'
      statementClasses:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/StatementClass'
      resources:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/Resource'
      statements:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/Statement'
      hierarchies:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/Node'
      files:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/File'
  Rights:
    type: object
    properties:
      title:
        type: string
      type:
        type: string
      url:
        type: string
  Creator:
    type: object
    properties:
      familyName:
        type: string
      givenName:
        type: string
      org:
        $ref: '#/definitions/Org'
      email:
        $ref: '#/definitions/Email'
  PropertyClass:
    type: object
    properties:
      id:
        type: string
      title:
        $ref: '#/definitions/Value'
      description:
        $ref: '#/definitions/Value'
      revision:
        type: string
      replaces:
        uniqueItems: false
        type: array
        items:
          type: string
      dataType:
        $ref: '#/definitions/Key'
      multiple:
        type: boolean
      changedAt:
        format: date-time
        type: string
      changedBy:
        type: string
  ResourceClass:
    type: object
    properties:
      id:
        type: string
      title:
        $ref: '#/definitions/Value'
      description:
        $ref: '#/definitions/Value'
      revision:
        type: string
      replaces:
        uniqueItems: false
        type: array
        items:
          type: string
      extends:
        $ref: '#/definitions/Key'
      icon:
        type: string
      isHeading:
        type: boolean
      instantiation:
        uniqueItems: false
        type: array
        items:
          type: string
      propertyClasses:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/Key'
      changedAt:
        format: date-time
        type: string
      changedBy:
        type: string
  StatementClass:
    type: object
    properties:
      id:
        type: string
      title:
        $ref: '#/definitions/Value'
      description:
        $ref: '#/definitions/Value'
      revision:
        type: string
      replaces:
        uniqueItems: false
        type: array
        items:
          type: string
      extends:
        $ref: '#/definitions/Key'
      icon:
        type: string
      instantiation:
        uniqueItems: false
        type: array
        items:
          type: string
      propertyClasses:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/Key'
      subjectClasses:
        uniqueItems: false
        type: array
        items:
          type: string
      objectClasses:
        uniqueItems: false
        type: array
        items:
          type: string
      changedAt:
        format: date-time
        type: string
      changedBy:
        type: string
  Resource:
    type: object
    properties:
      id:
        type: string
      title:
        $ref: '#/definitions/Value'
      description:
        $ref: '#/definitions/Value'
      class:
        $ref: '#/definitions/Key'
      language:
        type: string
      properties:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/Property'
      revision:
        type: string
      replaces:
        uniqueItems: false
        type: array
        items:
          type: string
      alternativeIds:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/AlternativeId'
      changedAt:
        format: date-time
        type: string
      changedBy:
        type: string
  Statement:
    type: object
    properties:
      id:
        type: string
      title:
        $ref: '#/definitions/Value'
      description:
        $ref: '#/definitions/Value'
      class:
        $ref: '#/definitions/Key'
      language:
        type: string
      properties:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/Property'
      revision:
        type: string
      replaces:
        uniqueItems: false
        type: array
        items:
          type: string
      alternativeIds:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/AlternativeId'
      subject:
        $ref: '#/definitions/Key'
      object:
        $ref: '#/definitions/Key'
      changedAt:
        format: date-time
        type: string
      changedBy:
        type: string
  File:
    type: object
    properties:
      id:
        type: string
      title:
        $ref: '#/definitions/Value'
      description:
        $ref: '#/definitions/Value'
      revision:
        type: string
      replaces:
        uniqueItems: false
        type: array
        items:
          type: string
      type:
        type: string
      changedAt:
        format: date-time
        type: string
      changedBy:
        type: string
  Org:
    type: object
    properties:
      organizationName:
        type: string
  Email:
    type: object
    properties:
      type:
        type: string
      value:
        type: string
  Key:
    type: object
    properties:
      id:
        type: string
      revision:
        type: string
  Property:
    type: object
    properties:
      id:
        type: string
      value:
        $ref: '#/definitions/Value'
      title:
        $ref: '#/definitions/Value'
      description:
        $ref: '#/definitions/Value'
      class:
        $ref: '#/definitions/Key'
      revision:
        type: string
      replaces:
        uniqueItems: false
        type: array
        items:
          type: string
      changedAt:
        format: date-time
        type: string
      changedBy:
        type: string
  AlternativeId:
    type: object
    properties: {}
tags: []
