openapi: 3.0.3
info:
  title: SpecIF Web API
  description: Web API for the Specification Integration Facility (SpecIF).
  contact:
    name: The SpecIF team at Gesellschaft f√ºr Systems Engineering (GfSE) e.V.
    url: https://specif.de
  license:
    name: Apache License 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0
  version: v1.1
paths:
  /specif/v1.1/dataTypes:
    get:
      tags:
        - DataType
      summary: Get all data types.
      responses:
        '200':
          description: List of data types returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SpecifDataType'
    post:
      tags:
        - DataType
      summary: Create the data type; the supplied ID must be unique. If no ID is supplied, it is created before insertion. 
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/SpecifDataType'
          application/json:
            schema:
              $ref: '#/components/schemas/SpecifDataType'
          text/json:
            schema:
              $ref: '#/components/schemas/SpecifDataType'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SpecifDataType'
      responses:
        '201':
          description: dataType created
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
        '409':
          description: Identifier exists already
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
    put:
      tags:
        - DataType
      summary: Update the data type; the supplied ID must exist.
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/SpecifDataType'
          application/json:
            schema:
              $ref: '#/components/schemas/SpecifDataType'
          text/json:
            schema:
              $ref: '#/components/schemas/SpecifDataType'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SpecifDataType'
      responses:
        '200':
          description: dataType updated
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
        '404':
          description: Not Found
  /specif/v1.1/dataTypes/{id}:
    get:
      tags:
        - DataType
      summary: Get the data type.
      parameters:
        - name: id
          in: path
          description: The data type ID.
          required: true
          schema:
            $ref: '#/components/schemas/SpecifId'
        - name: revision
          in: query
          description: The data type revision; if missing the newest is returned.
          schema:
            $ref: '#/components/schemas/SpecifRevision'
      responses:
        '200':
          description: data type returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpecifDataType'
        '404':
          description: Not Found
    delete:
      tags:
        - DataType
      summary: Delete the data type; returns an error if there are referencing elements.
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            $ref: '#/components/schemas/SpecifId'
        - name: forced
          in: query
          description: Query ?forced=true results in deleting all directly and indirectly referencing elements.
          schema:
            type: boolean
      responses:
        '200':
          description: data type deleted.
        '404':
          description: Not Found
        '409':
          description: data type is referenced.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
  /specif/v1.1/dataTypes/{id}/revisions:
    get:
      tags:
        - DataType
      summary: Get all revisions of the data type.
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            $ref: '#/components/schemas/SpecifId'
      responses:
        '200':
          description: All revisions of the data type returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SpecifDataType'
        '404':
          description: Not Found
  /specif/v1.1/files:
    get:
      tags:
        - File
      summary: Get all file descriptors.
      parameters:
        - name: project
          in: query
          description: Filter file descriptors by project with the given Id.
          schema:
            $ref: '#/components/schemas/SpecifId'
      responses:
        '200':
          description: List of file descriptors returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SpecifFile'
    post:
      tags:
        - File
      summary: Create (upload) the file; the supplied id and filename must be unique. The filename may contain a path with '/' as separators. If no id or filename is supplied, it is created before insertion. Upon upload, a SpecIF file descriptor is automatically generated.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                id:
                  type: string
                file:
                  type: string
                  format: binary
            encoding:
              file:
                style: form
      responses:
        '201':
          description: file created
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
        '409':
          description: Filename exists already
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
    put:
      tags:
        - File
      summary: Update (upload) the file; the supplied id and filename must exist. The filename may contain a path with '/' as separators. Upon upload, the SpecIF file descriptor is automatically updated. 
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                id:
                  type: string
                file:
                  type: string
                  format: binary
            encoding:
              file:
                style: form
      responses:
        '200':
          description: file updated
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
        '404':
          description: Not Found
  /specif/v1.1/files/{id}:
    get:
      tags:
        - File
      summary: Get the file descriptor including the file name = relative url.
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            $ref: '#/components/schemas/SpecifId'
        - name: revision
          in: query
          description: The file descriptor revision; if missing the newest is returned.
          schema:
            $ref: '#/components/schemas/SpecifRevision'
      responses:
        '200':
          description: file descriptor returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpecifFile'
        '404':
          description: Not Found
    delete:
      tags:
        - File
      summary: Delete the file descriptor and the file; returns an error if there are referencing elements.
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            $ref: '#/components/schemas/SpecifId'
        - name: forced
          in: query
          description: Query ?forced=true results in deleting all directly and indirectly referencing elements.
          schema:
            type: boolean
      responses:
        '200':
          description: file descriptor deleted.
        '404':
          description: Not Found
        '409':
          description: file or file descriptor is referenced.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
  /specif/v1.1/files/{id}/revisions:
    get:
      tags:
        - File
      summary: Get all revisions of the file descriptor.
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            $ref: '#/components/schemas/SpecifId'
      responses:
        '200':
          description: All revisions of the file descriptor returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SpecifFile'
        '404':
          description: Not Found
  /specif/v1.1/hierarchies:
    get:
      tags:
        - Hierarchy
      summary: Get all hierarchies.
      parameters:
        - name: project
          in: query
          description: Filter hierarchies by project with the given Id.
          schema:
            $ref: '#/components/schemas/SpecifId'
        - name: rootNodesOnly
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: List of hierarchies returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SpecifNodes'
    post:
      tags:
        - Hierarchy
      summary: Create the hierarchy (sub-tree) with supplied nodes; the supplied ID must be unique. If no ID is supplied, it is created before insertion. Query ?parent=nodeId - the sub-tree will be inserted as first child. Query ?predecessor=nodeId - the sub-tree will be inserted after the specified node. Without query, the node (sub-tree) is inserted as first element at root level.
      parameters:
        - name: parent
          in: query
          description: An optional parent node ID. The sub-tree will be inserted as first child.
          schema:
            type: string
            description: An optional parent node ID. The sub-tree will be inserted as first child.
        - name: predecessor
          in: query
          description: An optional predecessor node ID. The sub-tree will be inserted after the specified node.
          schema:
            type: string
            description: An optional predecessor node ID. The sub-tree will be inserted after the specified node.
        - name: projectId
          in: query
          description: The project ID. If the ID is given, the new hierarchy will be added to the specific project. Only useful for new hierarchies - no parent or predecessor given.
          schema:
            type: string
            description: The project ID. If the ID is given, the new hierarchy will be added to the specific project. Only useful for new hierarchies - no parent or predecessor given.
      requestBody:
        description: The hierarchy to create.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/SpecifNode'
          application/json:
            schema:
              $ref: '#/components/schemas/SpecifNode'
          text/json:
            schema:
              $ref: '#/components/schemas/SpecifNode'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SpecifNode'
      responses:
        '201':
          description: hierarchy created
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
        '409':
          description: Identifier exists already
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
    put:
      tags:
        - Hierarchy
      summary: Updates the hierarchy node. The supplied ID must exist somewhere in any hierarchy. Query ?parent=nodeId - the sub-tree will be moved and inserted as first child. Query ?predecessor=nodeId - the sub-tree will be moved and inserted after the specified node. Without query string, the node (sub-tree) is not moved.
      parameters:
        - name: parent
          in: query
          description: An optional parent node ID. The sub-tree will be inserted as first child.
          schema:
            type: string
            description: An optional parent node ID. The sub-tree will be inserted as first child.
        - name: predecessor
          in: query
          description: An optional predecessor node ID. The sub-tree will be inserted after the specified node.
          schema:
            type: string
            description: An optional predecessor node ID. The sub-tree will be inserted after the specified node.
      requestBody:
        description: The hierarchy node to update; the supplied ID must exist.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/SpecifNode'
          application/json:
            schema:
              $ref: '#/components/schemas/SpecifNode'
          text/json:
            schema:
              $ref: '#/components/schemas/SpecifNode'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SpecifNode'
      responses:
        '200':
          description: hierarchy node updated
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
        '404':
          description: Not Found
  /specif/v1.1/hierarchies/{id}:
    get:
      tags:
        - Hierarchy
      summary: Get the hierarchy node.
      parameters:
        - name: id
          in: path
          description: The hierarchy ID.
          required: true
          schema:
            $ref: '#/components/schemas/SpecifId'
        - name: revision
          in: query
          description: The hierarchy revision.
          schema:
            $ref: '#/components/schemas/SpecifRevision'
        - name: depth
          in: query
          description: The maximum depth of child nodes to return. If missing the complete hierarchy depth is returned.
          schema:
            $ref: '#/components/schemas/SpecifHierarchyDepth'
      responses:
        '200':
          description: hierarchy node returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpecifNode'
        '404':
          description: Not Found
    delete:
      tags:
        - Hierarchy
      summary: Delete the hierarchy node with the sub-tree.
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            $ref: '#/components/schemas/SpecifId'
      responses:
        '200':
          description: hierarchy node with sub-tree deleted.
        '404':
          description: Not Found
  /specif/v1.1/hierarchies/{id}/revisions:
    get:
      tags:
        - Hierarchy
      summary: Get all revisions of the hierarchy node including sub-tree.
      parameters:
        - name: id
          in: path
          description: The hierarchy ID.
          required: true
          schema:
            $ref: '#/components/schemas/SpecifId'
        - name: depth
          in: query
          description: The maximum depth of child nodes to return. If not set the complete hierarchy depth is returned.
          schema:
            $ref: '#/components/schemas/SpecifHierarchyDepth'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SpecifNode'
        '404':
          description: Not Found
  /specif/v1.1/projects:
    get:
      tags:
        - Project
      summary: Get all projects; to limit the size only dataTypes, propertyClasses, resourceClasses, statementClasses and hierarchy root properties are delivered.
      responses:
        '200':
          description: List of projects returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SpecifProject'
    post:
      tags:
        - Project
      summary: Create the project; the supplied ID must be unique. If no ID is supplied, it is created before insertion. To limit the size of the request body, it is advised to send only dataTypes, propertyClasses, resourceClasses, statementClasses and hierarchy root properties at first and to post resources, statements and hierarchies subsequently.
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/SpecIF'
          application/json:
            schema:
              $ref: '#/components/schemas/SpecIF'
          text/json:
            schema:
              $ref: '#/components/schemas/SpecIF'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SpecIF'
      responses:
        '201':
          description: project created
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
        '409':
          description: Identifier exists already
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
    put:
      tags:
        - Project
      summary: Update the project; the supplied ID must exist. To limit the size of the request body, it is advised to send only dataTypes, propertyClasses, resourceClasses, statementClasses and hierarchy root properties at first and to post resources, statements and hierarchies subsequently. Any existing elements will be updated, any additional elements will be created and any missing elements will be deleted.
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/SpecIF'
          application/json:
            schema:
              $ref: '#/components/schemas/SpecIF'
          text/json:
            schema:
              $ref: '#/components/schemas/SpecIF'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SpecIF'
      responses:
        '200':
          description: project updated
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
        '404':
          description: Not Found
  /specif/v1.1/projects/{id}:
    get:
      tags:
        - Project
      summary: Get the project.
      parameters:
        - name: id
          in: path
          description: The project ID.
          required: true
          schema:
            $ref: '#/components/schemas/SpecifId'
        - name: hierarchies
          in: query
          description: An optional comma seperated list of hierarchy root node IDs to limit the output of selected hierarchies.
          schema:
            $ref: '#/components/schemas/SpecifKeys'
        - name: includeMetadata
          in: query
          description: Set to true if the metadata should be included (e.g. resource classes etc.)
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: project returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpecIF'
        '404':
          description: Not Found
    delete:
      tags:
        - Project
      summary: Delete the project.
      parameters:
        - name: id
          in: path
          description: The ID of the project to delete.
          required: true
          schema:
            $ref: '#/components/schemas/SpecifId'
      responses:
        '200':
          description: project deleted.
        '404':
          description: Not Found
  /specif/v1.1/propertyClasses:
    get:
      tags:
        - PropertyClass
      summary: Get all property classes.
      responses:
        '200':
          description: List of propertyClasses returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SpecifPropertyClass'
    post:
      tags:
        - PropertyClass
      summary: Create the property class; the supplied ID must be unique. If no ID is supplied, it is created before insertion. 
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/SpecifPropertyClass'
          application/json:
            schema:
              $ref: '#/components/schemas/SpecifPropertyClass'
          text/json:
            schema:
              $ref: '#/components/schemas/SpecifPropertyClass'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SpecifPropertyClass'
      responses:
        '201':
          description: property class created
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
        '409':
          description: Identifier exists already
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
    put:
      tags:
        - PropertyClass
      summary: Update the property class; the supplied ID must exist.
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/SpecifPropertyClass'
          application/json:
            schema:
              $ref: '#/components/schemas/SpecifPropertyClass'
          text/json:
            schema:
              $ref: '#/components/schemas/SpecifPropertyClass'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SpecifPropertyClass'
      responses:
        '200':
          description: property class updated
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
        '404':
          description: Not Found
  /specif/v1.1/propertyClasses/{id}:
    get:
      tags:
        - PropertyClass
      summary: Get the property class.
      parameters:
        - name: id
          in: path
          description: The property class ID.
          required: true
          schema:
            $ref: '#/components/schemas/SpecifId'
        - name: revision
          in: query
          description: The property class revsion; if missing the newest is returned.
          schema:
            $ref: '#/components/schemas/SpecifRevision'
      responses:
        '200':
          description: property class returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpecifPropertyClass'
        '404':
          description: Not Found
    delete:
      tags:
        - PropertyClass
      summary: Delete the property class; returns an error if there are referencing elements.
      parameters:
        - name: id
          in: path
          description: The property class ID.
          required: true
          schema:
            $ref: '#/components/schemas/SpecifId'
        - name: forced
          in: query
          description: Query ?forced=true results in deleting all directly and indirectly referencing elements.
          schema:
            type: boolean
      responses:
        '200':
          description: property class deleted.
        '404':
          description: Not Found
        '409':
          description: property class is referenced.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
  /specif/v1.1/propertyClasses/{id}/revisions:
    get:
      tags:
        - PropertyClass
      summary: Get all revisions of the property class.
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            $ref: '#/components/schemas/SpecifId'
      responses:
        '200':
          description: All revisions of the property class returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SpecifPropertyClass'
        '404':
          description: Not Found
  /specif/v1.1/resources:
    get:
      tags:
        - Resource
      summary: Get all resources.
      parameters:
        - name: project
          in: query
          description: Filter resources by project with the given Id.
          schema:
            $ref: '#/components/schemas/SpecifId'
        - name: class
          in: query
          description: Filter resources belonging to a class with the given Id.
          schema:
            $ref: '#/components/schemas/SpecifKey'
      responses:
        '200':
          description: List of resources returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SpecifResource'
    post:
      tags:
        - Resource
      summary: Create the resource; the supplied ID must be unique. If no ID is supplied, it is created before insertion. 
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/SpecifResource'
          application/json:
            schema:
              $ref: '#/components/schemas/SpecifResource'
          text/json:
            schema:
              $ref: '#/components/schemas/SpecifResource'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SpecifResource'
      responses:
        '201':
          description: resource created
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
        '409':
          description: Identifier exists already
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
    put:
      tags:
        - Resource
      summary: Update the resource; the supplied ID must exist.
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/SpecifResource'
          application/json:
            schema:
              $ref: '#/components/schemas/SpecifResource'
          text/json:
            schema:
              $ref: '#/components/schemas/SpecifResource'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SpecifResource'
      responses:
        '200':
          description: resource updated
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
        '404':
          description: Not Found
  /specif/v1.1/resources/{id}:
    get:
      tags:
        - Resource
      summary: Get the resource.
      parameters:
        - name: id
          in: path
          description: The resource ID.
          required: true
          schema:
            $ref: '#/components/schemas/SpecifId'
        - name: revision
          in: query
          description: The resource revision; if missing the newest is returned.
          schema:
            $ref: '#/components/schemas/SpecifRevision'
      responses:
        '200':
          description: resource returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpecifResource'
        '404':
          description: Not Found
    delete:
      tags:
        - Resource
      summary: Delete the resource; returns an error if there are referencing elements.
      parameters:
        - name: id
          in: path
          description: The resource ID.
          required: true
          schema:
            $ref: '#/components/schemas/SpecifId'
        - name: forced
          in: query
          description: Query ?forced=true results in deleting all directly and indirectly referencing elements.
          schema:
            type: boolean
      responses:
        '200':
          description: resource deleted.
        '404':
          description: Not Found
        '409':
          description: resource is referenced.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
  /specif/v1.1/resources/{id}/revisions:
    get:
      tags:
        - Resource
      summary: Get all revisions of the resource.
      parameters:
        - name: id
          in: path
          description: The resource ID.
          required: true
          schema:
            $ref: '#/components/schemas/SpecifId'
      responses:
        '200':
          description: All revisions of the resource returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SpecifResource'
        '404':
          description: Not Found
  /specif/v1.1/resources/{id}/statements:
    get:
      tags:
        - Resource
      summary: Get all statements of the resource.
      parameters:
        - name: id
          in: path
          description: The resource ID.
          required: true
          schema:
            $ref: '#/components/schemas/SpecifId'
      responses:
        '200':
          description: All statements of the resource returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SpecifStatement'
        '404':
          description: Not Found
  /specif/v1.1/resourceClasses:
    get:
      tags:
        - ResourceClass
      summary: Get all resource classes.
      responses:
        '200':
          description: List of resource classes returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SpecifResourceClass'
    post:
      tags:
        - ResourceClass
      summary: Create the resource class; the supplied ID must be unique. If no ID is supplied, it is created before insertion. 
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/SpecifResourceClass'
          application/json:
            schema:
              $ref: '#/components/schemas/SpecifResourceClass'
          text/json:
            schema:
              $ref: '#/components/schemas/SpecifResourceClass'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SpecifResourceClass'
      responses:
        '201':
          description: resource class created
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
        '409':
          description: Identifier exists already
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
    put:
      tags:
        - ResourceClass
      summary: Update the resource class; the supplied ID must exist.
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/SpecifResourceClass'
          application/json:
            schema:
              $ref: '#/components/schemas/SpecifResourceClass'
          text/json:
            schema:
              $ref: '#/components/schemas/SpecifResourceClass'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SpecifResourceClass'
      responses:
        '200':
          description: resource class updated
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
        '404':
          description: Not Found
  /specif/v1.1/resourceClasses/{id}:
    get:
      tags:
        - ResourceClass
      summary: Get the resource class.
      parameters:
        - name: id
          in: path
          description: The resource class ID.
          required: true
          schema:
            $ref: '#/components/schemas/SpecifId'
        - name: revision
          in: query
          description: The resource class revision; if missing the newest is returned.
          schema:
            $ref: '#/components/schemas/SpecifRevision'
      responses:
        '200':
          description: resource class returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpecifResourceClass'
        '404':
          description: Not Found
    delete:
      tags:
        - ResourceClass
      summary: Delete the resource class; returns an error if there are referencing elements.
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            $ref: '#/components/schemas/SpecifId'
        - name: forced
          in: query
          description: Query ?forced=true results in deleting all directly and indirectly referencing elements.
          schema:
            type: boolean
      responses:
        '200':
          description: resource class deleted.
        '404':
          description: Not Found
        '409':
          description: resource class is referenced.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
  /specif/v1.1/resourceClasses/{id}/revisions:
    get:
      tags:
        - ResourceClass
      summary: Get all revisions of the resource class.
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            $ref: '#/components/schemas/SpecifId'
      responses:
        '200':
          description: All revisions of the resource class returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SpecifResourceClass'
        '404':
          description: Not Found
  /specif/v1.1/statements:
    get:
      tags:
        - Statement
      summary: Get all statements.
      parameters:
        - name: project
          in: query
          description: Filter statements by project with the given Id.
          schema:
            $ref: '#/components/schemas/SpecifId'
        - name: class
          in: query
          description: Filter statements belonging to a class with the given Id.
          schema:
            $ref: '#/components/schemas/SpecifKey'
        - name: element
          in: query
          description: Filter statements where the element with the given Id is a subject or an object.
          schema:
            $ref: '#/components/schemas/SpecifKey'
        - name: subject
          in: query
          description: Filter statements where the element with the given Id is a subject.
          schema:
            $ref: '#/components/schemas/SpecifKey'
        - name: object
          in: query
          description: Filter statements where the element with the given Id is an object.
          schema:
            $ref: '#/components/schemas/SpecifKey'
      responses:
        '200':
          description: List of statements returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SpecifStatement'
    post:
      tags:
        - Statement
      summary: Create the statement; the supplied ID must be unique. If no ID is supplied, it is created before insertion. 
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/SpecifStatement'
          application/json:
            schema:
              $ref: '#/components/schemas/SpecifStatement'
          text/json:
            schema:
              $ref: '#/components/schemas/SpecifStatement'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SpecifStatement'
      responses:
        '201':
          description: statement created
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
        '409':
          description: Identifier exists already
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
    put:
      tags:
        - Statement
      summary: Update the statement; the supplied ID must exist.
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/SpecifStatement'
          application/json:
            schema:
              $ref: '#/components/schemas/SpecifStatement'
          text/json:
            schema:
              $ref: '#/components/schemas/SpecifStatement'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SpecifStatement'
      responses:
        '201':
          description: statement updated
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
        '404':
          description: Not Found
  /specif/v1.1/statements/{id}:
    get:
      tags:
        - Statement
      summary: Get the statement.
      parameters:
        - name: id
          in: path
          description: The statement ID.
          required: true
          schema:
            $ref: '#/components/schemas/SpecifId'
        - name: revision
          in: query
          description: The statement revision; if missing the newest is returned.
          schema:
            $ref: '#/components/schemas/SpecifRevision'
      responses:
        '200':
          description: statement returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpecifStatement'
        '404':
          description: Not Found
    delete:
      tags:
        - Statement
      summary: Delete the statement.
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            $ref: '#/components/schemas/SpecifId'
      responses:
        '200':
          description: statement deleted.
        '404':
          description: Not Found
  /specif/v1.1/statements/{id}/revisions:
    get:
      tags:
        - Statement
      summary: Get all revisions of the statement.
      parameters:
        - name: id
          in: path
          description: The statement ID.
          required: true
          schema:
            $ref: '#/components/schemas/SpecifId'
      responses:
        '200':
          description: All revisions of the statement returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SpecifStatement'
        '404':
          description: Not Found
  /specif/v1.1/statementClasses:
    get:
      tags:
        - StatementClass
      summary: Get all statement classes.
      responses:
        '200':
          description: List of statement classes returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SpecifStatementClass'
    post:
      tags:
        - StatementClass
      summary: Create the statement class; the supplied ID must be unique. If no ID is supplied, it is created before insertion. 
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/SpecifStatementClass'
          application/json:
            schema:
              $ref: '#/components/schemas/SpecifStatementClass'
          text/json:
            schema:
              $ref: '#/components/schemas/SpecifStatementClass'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SpecifStatementClass'
      responses:
        '201':
          description: statement class created
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
        '409':
          description: Identifier exists already
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
    put:
      tags:
        - StatementClass
      summary: Update the statement class; the supplied ID must exist.
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/SpecifStatementClass'
          application/json:
            schema:
              $ref: '#/components/schemas/SpecifStatementClass'
          text/json:
            schema:
              $ref: '#/components/schemas/SpecifStatementClass'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SpecifStatementClass'
      responses:
        '200':
          description: statement class updated
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
        '404':
          description: Not Found
  /specif/v1.1/statementClasses/{id}:
    get:
      tags:
        - StatementClass
      summary: Get the statement class.
      parameters:
        - name: id
          in: path
          description: The statement class ID.
          required: true
          schema:
            $ref: '#/components/schemas/SpecifId'
        - name: revision
          in: query
          description: The statement class revision; if missing the newest is returned.
          schema:
            $ref: '#/components/schemas/SpecifRevision'
      responses:
        '200':
          description: statement class returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatementClass'
        '404':
          description: Not Found
    delete:
      tags:
        - StatementClass
      summary: Delete the statement class; returns an error if there are referencing elements.
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            $ref: '#/components/schemas/SpecifId'
        - name: forced
          in: query
          description: Query ?forced=true results in deleting all directly and indirectly referencing elements.
          schema:
            type: boolean
      responses:
        '200':
          description: statement class deleted.
        '404':
          description: Not Found
        '409':
          description: statement class is referenced.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
  /specif/v1.1/statementClasses/{id}/revisions:
    get:
      tags:
        - StatementClass
      summary: Get all revisions of the statement class.
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            $ref: '#/components/schemas/SpecifId'
      responses:
        '200':
          description: All revisions of the statement class returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SpecifStatementClass'
        '404':
          description: Not Found
components:
  schemas:
    SpecifId:
      description: "A globally unique identifier."
      type: string
      pattern: "^[_a-zA-Z]{1}[_a-zA-Z0-9.-]*$"
    SpecifRevision:
      description: "A globally unique revision tag with one or multiple blocks with alphanumeric characters separated by a special character [.:,;/-]. Sequential as well as branching/merging notations are possible."
      type: string
      pattern: "^(?:[0-9a-zA-Z]+[.:,;\/-])*[0-9a-zA-Z]+$"
    SpecifReplaces:
      description: "For change and configuration management; the first revision has 0 entries, a simple modification has 1 entry and the result of a merge has 2 entries."
      type: array
      maxItems: 2
      uniqueItems: true
      items:
        $ref: "#/components/SpecifRevision"
    SpecifKey:
      description: "A key for a particular revision of an identifiable item, e.g. of a resource. A key consists of a globally unique identifier and a revision. No or an undefined revision means the latest revision of the identified item."
      type: object
      properties:
        id:
          $ref: '#/components/schemas/SpecifId'
        revision:
          $ref: '#/components/schemas/SpecifRevision'
      additionalProperties: false
      required:
        - id
    SpecifKeys:
      description: "A list of keys referencing items such as propertyClasses, resourceClasses or statementClasses; any list must have >0 entries including those of any parent element."
      type: array
      uniqueItems: true
      items:
        $ref: "#/components/SpecifKey"
    SpecifAlternativeId:
      description: "A list of pointers to resources resp. statements which have been merged to this one."
      type: object
      properties:
        id:
          $ref: '#/components/schemas/SpecifId'
        revision:
          $ref: '#/components/schemas/SpecifRevision'
        project:
          $ref: '#/components/schemas/SpecifId'
      additionalProperties: false
      required:
        - id
    SpecifAlternativeIds:
      description: "The list of consolidated items to be used in case a consolidated item shall be updated."
      type: array
      uniqueItems: true
      items:
        $ref: "#/components/SpecifAlternativeId"
    SpecifText:
      type: string
    SpecifTextFormat:
      type: string
      enum: 
        - plain
        - xhtml
    SpecifMultiLanguageText:
      type: array
      items:
        type: object
        properties:
          text:
            $ref: '#/components/schemas/SpecifText'
          format:
            $ref: '#/components/schemas/SpecifTextFormat'
          language:
            type: string
        additionalProperties: false
        required:
          - text
    SpecifValue:
      description: "First option for properties with dataType 'xs:string', second option for all others. Note that SpecIF represents *all* values including number and boolean as string."
      oneOf:
        - $ref: "#/components/SpecifMultiLanguageText"
        - type: string
    SpecifValues:
      description: "If 'multiple' of the propertyClass is undefined or false, the array must contain one item. If the value is unknown, omit the whole property. By default, the class' value applies."
      type: array
      minItems: 1
      uniqueItems: true
      items:
        $ref: '#/components/schemas/SpecifValue'
    SpecifEnumeratedValue:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/SpecifId'
        value:
          $ref: '#/components/schemas/SpecifValue'
      additionalProperties: false
      required:
        - id
        - value
    SpecifEnumeratedValues:
      type: array
      description: "Enumerated values for the given dataType. If 'multiple' is true 0..n options may be selected, otherwise exactly one must be selected."
      uniqueItems: true
      items:
        $ref: "#/components/SpecifEnumeratedValue"
    SpecifDateTime:
      description: "An ISO-8601 dateTime string. For reduced accuracy, any number of values may be dropped, but only from right to left."
      type: string
      format: date-time
    SpecifIcon:
      description: "A symbol for display as a prefix to titles; applicable to all instances of the class. Is usually a XML-encoded UTF-8 symbol, can be an URL or dataURL."
      type: string
    SpecifInstantiation:
      description": "Indicates whether an instance of the class is created automatically, manually or both. All is allowed, if the property is omitted. The class is abstract and cannot be instantiated, if the property list is present, but empty."
      type: array
      uniqueItems: true
      items:
        type: string
        enum: 
          - auto
          - user
    SpecifDataType:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/SpecifId'
        title:
          $ref: '#/components/schemas/SpecifText'
        description:
          $ref: '#/components/schemas/SpecifMultiLanguageText'
        revision:
          $ref: '#/components/schemas/SpecifRevision'
        replaces:
          $ref: '#/components/schemas/SpecifReplaces'
        type:
          type: string
          enum:
            - xs:boolean
            - xs:integer
            - xs:double
            - xs:anyUri
            - xs:dateTime
            - xs:duration
            - xs:string
        maxLength:
          type: integer
          format: int32
          minimum: 0
        fractionDigits:
          type: integer
          format: int32
          minimum: 1
        minInclusive:
          type: integer
          format: int32
        maxInclusive:
          type: integer
          format: int32
        enumeration:
          $ref: '#/components/schemas/SpecifEnumeratedValues'
        multiple:
          type: boolean
        changedAt:
          $ref: '#/components/schemas/SpecifDateTime'
        changedBy:
          type: string
      additionalProperties: false
      required:
        - id
        - title
        - type
        - changedAt
    SpecifPropertyClass:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/SpecifId'
        title:
          $ref: '#/components/schemas/SpecifText'
        description:
          $ref: '#/components/schemas/SpecifMultiLanguageText'
        dataType:
          $ref: '#/components/schemas/SpecifKey'
        multiple:
          type: boolean
        values:
          $ref: '#/components/schemas/SpecifValues'
        format:
          $ref: '#/components/schemas/SpecifTextFormat'
        unit:
          type: string
        revision:
          $ref: '#/components/schemas/SpecifRevision'
        replaces:
          $ref: '#/components/schemas/SpecifReplaces'
        changedAt:
          $ref: '#/components/schemas/SpecifDateTime'
        changedBy:
          type: string
      additionalProperties: false
      required:
        - id
        - title
        - dataType
        - changedAt
    SpecifResourceClass:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/SpecifId'
        title:
          $ref: '#/components/schemas/SpecifText'
        description:
          $ref: '#/components/schemas/SpecifMultiLanguageText'
        extends:
          $ref: '#/components/schemas/SpecifKey'
        icon:
          $ref: '#/components/schemas/SpecifIcon'
        isHeading:
          type: boolean
        instantiation:
          $ref: '#/components/schemas/SpecifInstantiation'
        propertyClasses:
          description: "A list of keys referencing propertyClasses; a base resourceClass must have at least one propertyClass, whereas an extending class may have none."
          $ref: '#/components/schemas/SpecifKeys'
        revision:
          $ref: '#/components/schemas/SpecifRevision'
        replaces:
          $ref: '#/components/schemas/SpecifReplaces'
        changedAt:
          $ref: '#/components/schemas/SpecifDateTime'
        changedBy:
          type: string
      additionalProperties: false
      required:
        - id
        - title
        - propertyClasses
        - changedAt
    SpecifStatementClass:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/SpecifId'
        title:
          $ref: '#/components/schemas/SpecifText'
        description:
          $ref: '#/components/schemas/SpecifMultiLanguageText'
        extends:
          $ref: '#/components/schemas/SpecifKey'
        icon:
          $ref: '#/components/schemas/SpecifIcon'
        instantiation:
          $ref: '#/components/schemas/SpecifInstantiation'
        isUndirected:
          type: boolean
        propertyClasses:
          description: "A list of keys referencing propertyClasses; a statementClass may exist without propertyClasses."
          $ref: '#/components/schemas/SpecifKeys'
        subjectClasses:
          description: "A list of keys referencing eligible resource and statement classes for a statement's subject; if missing, all resource or statement classes are eligible."
          $ref: '#/components/schemas/SpecifKeys'
        objectClasses:
          description: "A list of keys referencing eligible resource and statement classes for a statement's object; if missing, all resource or statement classes are eligible."
          $ref: '#/components/schemas/SpecifKeys'
        revision:
          $ref: '#/components/schemas/SpecifRevision'
        replaces:
          $ref: '#/components/schemas/SpecifReplaces'
        changedAt:
          $ref: '#/components/schemas/SpecifDateTime'
        changedBy:
          type: string
      additionalProperties: false
      required:
        - id
        - title
        - changedAt
    SpecifProperty:
      type: object
      properties:
        class:
          description: "Must be a member of 'propertyClasses'. In addition, it must be listed in the propertyClasses of the respective resource's or statement's (or any of it's parent's) class."
          $ref: '#/components/schemas/SpecifKey'
        values:
          $ref: '#/components/schemas/SpecifValues'
      additionalProperties: false
      required:
        - class
        - values
    SpecifResource:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/SpecifId'
        alternativeIds:
          $ref: "#/components/SpecifAlternativeIds"
        class:
          $ref: '#/components/schemas/SpecifKey'
        language:
          type: string
        properties:
          type: array
          items:
            $ref: '#/components/schemas/SpecifProperty'
        revision:
          $ref: '#/components/schemas/SpecifRevision'
        replaces:
          $ref: '#/components/schemas/SpecifReplaces'
        changedAt:
          $ref: '#/components/schemas/SpecifDateTime'
        changedBy:
          type: string
      additionalProperties: false
      required:
        - id
        - class
        - properties
        - changedAt
    SpecifStatement:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/SpecifId'
        alternativeIds:
          $ref: "#/components/SpecifAlternativeIds"
        class:
          $ref: '#/components/schemas/SpecifKey'
        language:
          type: string
        properties:
          description: "If there is no title property, the statementClass' title applies."
          type: array
          items:
            $ref: '#/components/schemas/SpecifProperty'
        subject:
          description: "Must be a member of resources or statements."
          $ref: '#/components/schemas/SpecifKey'
        object:
          description: "Must be a member of resources or statements."
          $ref: '#/components/schemas/SpecifKey'
        revision:
          $ref: '#/components/schemas/SpecifRevision'
        replaces:
          $ref: '#/components/schemas/SpecifReplaces'
        changedAt:
          $ref: '#/components/schemas/SpecifDateTime'
        changedBy:
          type: string
      additionalProperties: false
      required:
        - id
        - class
        - subject
        - object
        - changedAt
    SpecifNode:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/SpecifId'
        title:
          $ref: '#/components/schemas/SpecifMultiLanguageText'
        description:
          $ref: '#/components/schemas/SpecifMultiLanguageText'
        resource:
          description: "Must be a member of resources."
          $ref: '#/components/schemas/SpecifKey'
        nodes:
          $ref: '#/components/schemas/SpecifNodes'
        revision:
          $ref: '#/components/schemas/SpecifRevision'
        replaces:
          $ref: '#/components/schemas/SpecifReplaces'
        changedAt:
          $ref: '#/components/schemas/SpecifDateTime'
        changedBy:
          type: string
      additionalProperties: false
      required:
        - id
        - resource
        - changedAt
    SpecifNodes:
      description: "A list of pointers to resources; may be nested forming a tree, i.e. a hierarchy of pointers."
      type: array
      uniqueItems: true
      items:
        $ref: "#/components/schemas/SpecifNode"
    SpecifHierarchyDepth:
      description: The number of hierarchy levels.
      type: integer
      format: int32
    SpecifFile:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/SpecifId'
        title:
          $ref: '#/components/schemas/SpecifText'
        description:
          $ref: '#/components/schemas/SpecifMultiLanguageText'
        url:
          description: "An absolute or relative URL to the file; will be of format 'uri-reference' in future. If missing, the title applies."
          type: string
          format: uri
        type:
          description: "The file's media type (formerly MIME-type) according to https://www.iana.org/assignments/media-types/media-types.xhtml."
          type: string
        revision:
          $ref: '#/components/schemas/SpecifRevision'
        replaces:
          $ref: '#/components/schemas/SpecifReplaces'
        changedAt:
          $ref: '#/components/schemas/SpecifDateTime'
        changedBy:
          type: string
      additionalProperties: false
      required:
        - id
        - title
        - type
        - changedAt
    SpecifRights:
      type: object
      properties:
        title:
          type: string
        url:
          type: string
          format: uri
      additionalProperties: false
      required:
        - title
        - url
    SpecifOrg:
      type: object
      properties:
        organizationName:
          type: string
      additionalProperties: false
      required:
        - organizationName
    SpecifCreatedBy:
      description: "The creator of the SpecIF data-set (file). If specified, at least an e-mail address must be given."
      type: object
      properties:
        familyName:
          type: string
        givenName:
          type: string
        org:
          $ref: '#/components/schemas/SpecifOrg'
        email:
          type: string
          format: email
      additionalProperties: false
      required:
        - email
    SpecifMetaSchema:
      type: string
      format: uri
      pattern: "^https?:\\/\\/(specif\\.de\\/v1\\.1\\/schema|json\\.schemastore\\.org\\/specif-1\\.1)\\.json$"
    SpecifProject:
      type: object
      properties:
        $schema:
          $ref: '#/components/schemas/SpecifMetaSchema'
        id:
          $ref: '#/components/schemas/SpecifId'
        revision:
          $ref: '#/components/schemas/SpecifRevision'
        title:
          $ref: '#/components/schemas/SpecifMultiLanguageText'
        description:
          $ref: '#/components/schemas/SpecifMultiLanguageText'
        isExtension:
          type: boolean
        generator:
          type: string
        generatorVersion:
          type: string
        rights:
          $ref: '#/components/schemas/SpecifRights'
        createdAt:
          $ref: '#/components/schemas/SpecifDateTime'
        createdBy:
          $ref: '#/components/schemas/SpecifCreatedBy'
        hierarchies:
          description: 'Just the root nodes to limit the size; starting with these, all other elements can be requested later on.'
          $ref: '#/components/schemas/SpecifNodes'
      additionalProperties: false
      required:
          - $schema
          - id
          - hierarchies
    SpecIF:
      type: object
      properties:
        $schema:
          $ref: '#/components/schemas/SpecifMetaSchema'
        id:
          $ref: '#/components/schemas/SpecifId'
        revision:
          $ref: '#/components/schemas/SpecifRevision'
        title:
          $ref: '#/components/schemas/SpecifMultiLanguageText'
        description:
          $ref: '#/components/schemas/SpecifMultiLanguageText'
        isExtension:
          type: boolean
        generator:
          type: string
        generatorVersion:
          type: string
        rights:
          $ref: '#/components/schemas/SpecifRights'
        createdAt:
          $ref: '#/components/schemas/SpecifDateTime'
        createdBy:
          $ref: '#/components/schemas/SpecifCreatedBy'
        dataTypes:
          type: array
          items:
            $ref: '#/components/schemas/SpecifDataType'
        propertyClasses:
          type: array
          items:
            $ref: '#/components/schemas/SpecifPropertyClass'
        resourceClasses:
          type: array
          items:
            $ref: '#/components/schemas/SpecifResourceClass'
        statementClasses:
          type: array
          items:
            $ref: '#/components/schemas/SpecifStatementClass'
        resources:
          type: array
          items:
            $ref: '#/components/schemas/SpecifResource'
        statements:
          type: array
          items:
            $ref: '#/components/schemas/SpecifStatement'
        hierarchies:
          $ref: '#/components/schemas/SpecifNodes'
        files:
          type: array
          items:
            $ref: '#/components/schemas/SpecifFile'
      additionalProperties: false
      required:
          - $schema
          - id
          - dataTypes
          - propertyClasses
          - resourceClasses
          - statementClasses
          - resources
          - statements
          - hierarchies
    HttpStatusDetails:
      type: object
      properties:
        type:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        status:
          type: integer
          format: int32
          nullable: true
        detail:
          type: string
          nullable: true
        instance:
          type: string
          nullable: true
      additionalProperties: {}
  securitySchemes:
    X-API-KEY:
      type: apiKey
      description: 'API key needed to access the endpoints. X-API-KEY: My_API_Key'
      name: X-API-KEY
      in: header
security:
  - X-API-KEY: []
