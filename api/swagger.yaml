swagger: '2.0'
info:
  version: v1.0
  title: SpecIF API
  description: Web API for the Specification Integration Facility (SpecIF).
  contact:
    name: The SpecIF team at Gesellschaft f√ºr Systems Engineering (GfSE) e.V.
    url: 'https://specif.de'
  license:
    name: Apache License 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0'
paths:
  /specif/v1.0/dataTypes:
    get:
      tags:
        - DataType
      summary: Returns all data types with all available revisions.
      operationId: GetAllDataTypes
      consumes: []
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: List of data types suceessfull returned.
          schema:
            uniqueItems: false
            type: array
            items:
              $ref: '#/definitions/DataType'
    put:
      tags:
        - DataType
      summary: Update the data type; the supplied ID must exist.
      operationId: UpdateDataType
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters:
        - name: dataType
          in: body
          description: The data type data.
          required: false
          schema:
            $ref: '#/definitions/DataType'
      responses:
        '200':
          description: Success
    post:
      tags:
        - DataType
      summary: Create a data type.
      operationId: CreateDataType
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters:
        - name: dataType
          in: body
          description: The data type to create.
          required: false
          schema:
            $ref: '#/definitions/DataType'
      responses:
        '200':
          description: Success
  '/specif/v1.0/dataTypes/{id}':
    get:
      tags:
        - DataType
      summary: Returns a data type with the given ID.
      operationId: GetDataTypeById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The data type ID.
          required: true
          type: string
        - name: revision
          in: query
          description: The data type revision id.
          required: false
          type: string
      responses:
        '400':
          description: Bad Request
        '404':
          description: Not Found
    delete:
      tags:
        - DataType
      summary: "Delete the data type; the supplied ID must exist. \r\nReturn an error if there are depending model elements."
      operationId: DeleteDataType
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          type: string
        - name: revision
          in: query
          description: ''
          required: false
          type: string
        - name: mode
          in: query
          description: Delete mode. ?mode=forced results in deleting all directly and indirectly depending model elements.
          required: false
          type: string
      responses:
        '200':
          description: Success
  '/specif/v1.0/dataTypes/{id}/revisions':
    get:
      tags:
        - DataType
      summary: Returns all data type revisions for the given id.
      operationId: GetAllDatatypeRevisions
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            uniqueItems: false
            type: array
            items:
              $ref: '#/definitions/DataType'
  /specif/v1.0/files:
    get:
      tags:
        - File
      summary: Return all file descriptions for all available files in all revisions.
      operationId: GetAllFiles
      consumes: []
      produces:
        - application/json
      parameters:
        - name: projectID
          in: query
          description: An optional projectID as filter.
          required: false
          type: string
      responses:
        '200':
          description: Success
          schema:
            uniqueItems: false
            type: array
            items:
              $ref: '#/definitions/File'
    put:
      tags:
        - File
      summary: Update the file; the supplied ID must exist.
      operationId: UpdateFile
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters:
        - name: file
          in: body
          description: ''
          required: false
          schema:
            $ref: '#/definitions/IFormFile'
      responses:
        '200':
          description: Success
    post:
      tags:
        - File
      summary: Create a file; the supplied ID must be unique.
      operationId: CreateNewFile
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters:
        - name: file
          in: body
          description: ''
          required: false
          schema:
            $ref: '#/definitions/IFormFile'
      responses:
        '200':
          description: Success
  '/specif/v1.0/files/{id}':
    get:
      tags:
        - File
      summary: Returns a specific file.
      operationId: GetFileById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          type: string
        - name: revision
          in: query
          description: ''
          required: false
          type: string
      responses:
        '200':
          description: Success
    delete:
      tags:
        - File
      summary: Delete the file; the supplied ID must exist.
      operationId: DeleteFile
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          type: string
        - name: revision
          in: query
          description: ''
          required: false
          type: string
      responses:
        '200':
          description: Success
  '/specif/v1.0/files/{id}/revisions':
    get:
      tags:
        - File
      summary: Returns all available file revisions as SpecIF file descriptions.
      operationId: GetAllFileRevisions
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The file id.
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            uniqueItems: false
            type: array
            items:
              $ref: '#/definitions/File'
  /specif/v1.0/hierarchies:
    get:
      tags:
        - Hierarchy
      summary: Get all hierarchies.
      operationId: GetAllHierarchies
      consumes: []
      produces:
        - application/json
      parameters:
        - name: project
          in: query
          required: false
          type: string
        - name: rootNodesOnly
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Success
          schema:
            uniqueItems: false
            type: array
            items:
              $ref: '#/definitions/Node'
    put:
      tags:
        - Hierarchy
      summary: "Update an existing hierarchy node.\r\nthe supplied ID must exist somewhere in any hierarchy. \r\nQuery ?parent=nodeId - the sub-tree will be moved and inserted as first child; \r\nquery ?predecessor=nodeId - the sub-tree will be moved and inserted after the specified node. \r\nWithout query string, the node (sub-tree) is not moved."
      operationId: UpdateHierarchy
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters:
        - name: node
          in: body
          description: ''
          required: false
          schema:
            $ref: '#/definitions/Node'
        - name: parent
          in: query
          description: An optional parent node id. The sub-tree will be inserted as first child.
          required: false
          type: string
        - name: predecessor
          in: query
          description: An optional prdecessor node id. The sub-tree will be inserted after the specified node.
          required: false
          type: string
      responses:
        '200':
          description: Success
    post:
      tags:
        - Hierarchy
      summary: "Create a hierarchy (sub-tree) with supplied nodes; the supplied ID must be unique. \r\nIf no ID is supplied, it is generated before insertion. \r\nQuery ?parent=nodeId - the sub-tree will be inserted as first child; \r\nquery ?predecessor=nodeId - the sub-tree will be inserted after the specified node; \r\nno query - the sub-tree will be inserted as first element at root level. \r\nWithout query string, the node (sub-tree) is inserted as first element at root level."
      operationId: CreateNewHierarchy
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters:
        - name: node
          in: body
          description: The hierarchy data to add.
          required: false
          schema:
            $ref: '#/definitions/Node'
        - name: parent
          in: query
          description: An optional parent node id. The sub-tree will be inserted as first child.
          required: false
          type: string
        - name: predecessor
          in: query
          description: An optional prdecessor node id. The sub-tree will be inserted after the specified node.
          required: false
          type: string
        - name: projectId
          in: query
          description: "The projectId. If the id is given, the new hierarchy will be added to the specific project. \r\n            Only usfull for new hierarchies - no parent or predecessor given."
          required: false
          type: string
      responses:
        '200':
          description: Success
  '/specif/v1.0/hierarchies/{id}':
    get:
      tags:
        - Hierarchy
      summary: Get hierarchy with a specific ID.
      operationId: GetHierarchyById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The hierarchy ID.
          required: true
          type: string
        - name: revision
          in: query
          description: The hierarchy revision.
          required: false
          type: string
        - name: depth
          in: query
          description: The maximum depth of child nodes to return. If not set the complete hierarchy depth is returned.
          required: false
          type: integer
          format: int32
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Node'
    delete:
      tags:
        - Hierarchy
      summary: Delete a hierarchy.
      operationId: DeleteHierarchy
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          type: string
        - name: revision
          in: query
          description: ''
          required: false
          type: string
      responses:
        '200':
          description: Success
  '/specif/v1.0/hierarchies/{id}/revisions':
    get:
      tags:
        - Hierarchy
      summary: Get all revisions from a hierarchy with a specific ID.
      operationId: GetAllHierarchyRevisions
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The hierarchy ID.
          required: true
          type: string
        - name: depth
          in: body
          description: The maximum depth of child nodes to return. If not set the complete hierarchy depth is returned.
          required: false
          schema:
            format: int32
            type: integer
      responses:
        '200':
          description: Success
          schema:
            uniqueItems: false
            type: array
            items:
              $ref: '#/definitions/Node'
  /specif/v1.0/primitiveTypes:
    get:
      tags:
        - PrimitiveTypes
      summary: Returns a list with the names of the available primitive types.
      operationId: GetPrimitiveTypeList
      consumes: []
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: List of primitive types suceessfull returned.
          schema:
            uniqueItems: false
            type: array
            items:
              type: string
  /specif/v1.0/projects:
    get:
      tags:
        - Project
      summary: Return all projects; to limit the size only root properties are delivered.
      operationId: GetAllProjects
      consumes: []
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: Success
          schema:
            uniqueItems: false
            type: array
            items:
              $ref: '#/definitions/ProjectDescriptor'
    put:
      tags:
        - Project
      summary: Update a project with the given ID by including the data into an existing project. The project with the supplied ID must exist.
      operationId: UpdateProject
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters:
        - name: value
          in: body
          description: The SpecIF data to include.
          required: false
          schema:
            $ref: '#/definitions/SpecIF'
      responses:
        '200':
          description: Success
    post:
      tags:
        - Project
      summary: "Create a project with supplied elements; the supplied ID must be unique in the project scope. \r\nIf no ID is supplied, it is generated before insertion."
      operationId: CreateNewProject
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters:
        - name: specIF
          in: body
          description: The SpecIF data defining the project.
          required: false
          schema:
            $ref: '#/definitions/SpecIF'
        - name: integrationId
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Success
  '/specif/v1.0/projects/{id}':
    get:
      tags:
        - Project
      summary: Return the project with the given ID.
      operationId: GetProjectByID
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The project id.
          required: true
          type: string
        - name: hierarchyFilter
          in: query
          description: An optional comma seperated list of hierarchy root node IDs to limit the output of selected hierarchies.
          required: false
          type: string
        - name: includeMetedata
          in: query
          description: Set to true if the metadata should be included (e.g. Resource Classes etc.)
          required: false
          type: boolean
          default: true
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/SpecIF'
    delete:
      tags:
        - Project
      summary: Delete a project with the given ID.
      operationId: DeleteProject
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: Th ID of the project to delete.
          required: true
          type: string
      responses:
        '200':
          description: Success
  /specif/v1.0/propertyClasses:
    get:
      tags:
        - PropertyClass
      summary: Returns all property classes with alll available revisions.
      operationId: GetAllPropertyClasses
      consumes: []
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: Success
          schema:
            uniqueItems: false
            type: array
            items:
              $ref: '#/definitions/PropertyClass'
        '400':
          description: Bad Request
    put:
      tags:
        - PropertyClass
      summary: Update the property class; the supplied ID must exist.
      operationId: UpdatePropertyClass
      consumes: []
      produces:
        - application/json
      parameters:
        - name: dataType.ID
          in: query
          required: false
          type: string
        - name: dataType.Revision
          in: query
          required: false
          type: string
        - name: dataType.DataSource.ServiceName
          in: query
          required: false
          type: string
        - name: dataType.DataSource.ServiceAddress
          in: query
          required: false
          type: string
        - name: dataType.DataSource.ServicePort
          in: query
          required: false
          type: integer
          format: int32
        - name: dataType.DataSource.ServiceDescription
          in: query
          required: false
          type: string
        - name: dataType.DataSource.ServiceNativeAccess
          in: query
          required: false
          type: string
        - name: dataType.DataSource.ServiceKind
          in: query
          required: false
          type: string
        - name: dataType.DataSource.IconURL
          in: query
          required: false
          type: string
        - name: dataType.DataSource.ID
          in: query
          required: false
          type: string
        - name: dataType.DataSource.MetadataRead
          in: query
          required: false
          type: boolean
        - name: dataType.DataSource.MetadataWrite
          in: query
          required: false
          type: boolean
        - name: dataType.DataSource.DataRead
          in: query
          required: false
          type: boolean
        - name: dataType.DataSource.DataWrite
          in: query
          required: false
          type: boolean
        - name: dataType.DataSource.Tags
          in: query
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
          uniqueItems: false
        - name: multiple
          in: query
          required: false
          type: boolean
        - name: projectID
          in: query
          required: false
          type: string
        - name: title
          in: query
          required: false
          type: string
        - name: description
          in: query
          required: false
          type: string
        - name: changedAt
          in: query
          required: false
          type: string
          format: date-time
        - name: changedBy
          in: query
          required: false
          type: string
        - name: id
          in: query
          required: false
          type: string
        - name: iD
          in: query
          required: false
          type: string
        - name: revision
          in: query
          required: false
          type: string
        - name: replaces
          in: query
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
          uniqueItems: false
        - name: dataSource.ServiceName
          in: query
          required: false
          type: string
        - name: dataSource.ServiceAddress
          in: query
          required: false
          type: string
        - name: dataSource.ServicePort
          in: query
          required: false
          type: integer
          format: int32
        - name: dataSource.ServiceDescription
          in: query
          required: false
          type: string
        - name: dataSource.ServiceNativeAccess
          in: query
          required: false
          type: string
        - name: dataSource.ServiceKind
          in: query
          required: false
          type: string
        - name: dataSource.IconURL
          in: query
          required: false
          type: string
        - name: dataSource.ID
          in: query
          required: false
          type: string
        - name: dataSource.MetadataRead
          in: query
          required: false
          type: boolean
        - name: dataSource.MetadataWrite
          in: query
          required: false
          type: boolean
        - name: dataSource.DataRead
          in: query
          required: false
          type: boolean
        - name: dataSource.DataWrite
          in: query
          required: false
          type: boolean
        - name: dataSource.Tags
          in: query
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
          uniqueItems: false
      responses:
        '200':
          description: Success
    post:
      tags:
        - PropertyClass
      summary: Create a new property class.
      operationId: CreatePropertyClass
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters:
        - name: propertyClass
          in: body
          required: false
          schema:
            $ref: '#/definitions/PropertyClass'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/PropertyClass'
  '/specif/v1.0/propertyClasses/{id}':
    get:
      tags:
        - PropertyClass
      summary: Returns the property class with the given ID.
      operationId: GetPropertyClassById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The property class ID.
          required: true
          type: string
        - name: revision
          in: query
          description: The property class revsion.
          required: false
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/PropertyClass'
        '400':
          description: Bad Request
        '404':
          description: Not Found
    delete:
      tags:
        - PropertyClass
      summary: "Delete the property class; the supplied ID must exist. \r\nReturn an error if there are depending model elements."
      operationId: DeletePropertyClass
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The property class ID.
          required: true
          type: string
        - name: revision
          in: query
          description: The property class revision.
          required: false
          type: string
        - name: mode
          in: query
          description: Delete mode. ?mode=forced results in deleting all directly and indirectly depending model elements.
          required: false
          type: string
      responses:
        '200':
          description: Success
  '/specif/v1.0/propertyClasses/{id}/revisions':
    get:
      tags:
        - PropertyClass
      summary: Returns all property class revisions for the given id.
      operationId: GetAllPropertyClassRevisions
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            uniqueItems: false
            type: array
            items:
              $ref: '#/definitions/PropertyClass'
  /specif/v1.0/resources:
    get:
      tags:
        - Resource
      summary: Returns all resources with all available revisions.
      operationId: GetAllResources
      consumes: []
      produces:
        - application/json
      parameters:
        - name: projectID
          in: query
          description: An optional project ID. The endpoint then returns only resources for the given project.
          required: false
          type: string
      responses:
        '200':
          description: Success
          schema:
            uniqueItems: false
            type: array
            items:
              $ref: '#/definitions/Resource'
    put:
      tags:
        - Resource
      summary: Update a resource. The ID included in the resource data must exist.
      operationId: UpdateResource
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters:
        - name: resource
          in: body
          description: ''
          required: false
          schema:
            $ref: '#/definitions/Resource'
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/Resource'
    post:
      tags:
        - Resource
      summary: Adds a new resource to the SpecIF repository.
      operationId: AddNewResource
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters:
        - name: resource
          in: body
          description: The resource data.
          required: false
          schema:
            $ref: '#/definitions/Resource'
        - name: projectID
          in: query
          description: 'The optional project ID. If a project ID is not given, the data is added to a default project.'
          required: false
          type: string
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/Resource'
  '/specif/v1.0/resources/{id}':
    get:
      tags:
        - Resource
      summary: Returns the latest version of the resource with the given ID.
      operationId: GetResourceById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The resource ID.
          required: true
          type: string
        - name: revision
          in: query
          description: The resource revision.
          required: false
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Resource'
    delete:
      tags:
        - Resource
      summary: Delete the resource.
      operationId: DeleteResource
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The resource ID.
          required: true
          type: string
        - name: revision
          in: query
          description: The resource revision.
          required: false
          type: string
        - name: mode
          in: query
          description: '?mode=forced results in deleting all directly and indirectly depending model elements.'
          required: false
          type: string
      responses:
        '200':
          description: Success
  '/specif/v1.0/resources/{id}/revisions':
    get:
      tags:
        - Resource
      summary: Returns a list of all revisions for the resource with the given ID.
      operationId: GetAllResourceRevisions
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The resource ID.
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            uniqueItems: false
            type: array
            items:
              $ref: '#/definitions/Resource'
  /specif/v1.0/resourceClasses:
    get:
      tags:
        - ResourceClass
      summary: Returns all resource classes with all available revisions.
      operationId: GetAllResourceClasses
      consumes: []
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: Success
          schema:
            uniqueItems: false
            type: array
            items:
              $ref: '#/definitions/ResourceClass'
        '400':
          description: Bad Request
        '404':
          description: Not Found
    put:
      tags:
        - ResourceClass
      summary: "Update a resource class.\r\nThe subjected ID must exist."
      operationId: UpdateResourceClass
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters:
        - name: resourceClass
          in: body
          description: The statement class data.
          required: false
          schema:
            $ref: '#/definitions/Resource'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ResourceClass'
    post:
      tags:
        - ResourceClass
      summary: Create a new resource class.
      operationId: CreateResourceClass
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters:
        - name: resourceClass
          in: body
          description: The resource class data.
          required: false
          schema:
            $ref: '#/definitions/ResourceClass'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ResourceClass'
  '/specif/v1.0/resourceClasses/{id}':
    get:
      tags:
        - ResourceClass
      summary: Returns the resource class with the given ID.
      operationId: GetResourceClassById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The resource class ID.
          required: true
          type: string
        - name: revision
          in: query
          description: The resource class revision.
          required: false
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/ResourceClass'
        '400':
          description: Bad Request
        '404':
          description: Not Found
    delete:
      tags:
        - ResourceClass
      summary: Delete a resource class with the given ID.
      operationId: DeleteResourceClass
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The resource class ID.
          required: true
          type: string
        - name: revision
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Success
  '/specif/v1.0/resourceClasses/{id}/revisions':
    get:
      tags:
        - ResourceClass
      summary: Returns all resource class revisions for the given id.
      operationId: GetAllResourceClassRevisions
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            uniqueItems: false
            type: array
            items:
              $ref: '#/definitions/ResourceClass'
        '400':
          description: Bad Request
        '404':
          description: Not Found
  /specif/v1.0/statements:
    get:
      tags:
        - Statement
      summary: "Returns all statements with all available revisions.\r\nWith the optional project ID only the satatements for the project are returned."
      operationId: GetAllStatements
      consumes: []
      produces:
        - application/json
      parameters:
        - name: projectID
          in: query
          description: The optional project ID to filter statements by project.
          required: false
          type: string
        - name: subjectID
          in: query
          description: The optional subjectID to filter statements only sourcing the element with the given id.
          required: false
          type: string
        - name: subjectRevision
          in: query
          description: An optional subject revision. Only usefull toghther with subjectID.
          required: false
          type: string
        - name: objectID
          in: query
          description: The optional objectID to filter statements only targeting the element with the given id.
          required: false
          type: string
        - name: objectRevision
          in: query
          description: An optional object revision. Only usefull toghther with objectId.
          required: false
          type: string
      responses:
        '200':
          description: Success
          schema:
            uniqueItems: false
            type: array
            items:
              $ref: '#/definitions/Statement'
    put:
      tags:
        - Statement
      summary: 'Update a new statement. If a statement with the given ID is still existant, a new revision is created automatically.'
      operationId: UpdateStatement
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters:
        - name: statemenet
          in: body
          description: The statement to update.
          required: false
          schema:
            $ref: '#/definitions/Statement'
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/Statement'
        '400':
          description: Bad Request
    post:
      tags:
        - Statement
      summary: Create a statement; the supplied ID must be unique in the project scope.
      operationId: CreateNewStatement
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters:
        - name: statement
          in: body
          description: The statement to create.
          required: false
          schema:
            $ref: '#/definitions/Statement'
      responses:
        '201':
          description: Success
          schema:
            $ref: '#/definitions/Statement'
        '400':
          description: Bad Request
  '/specif/v1.0/statements/{id}':
    get:
      tags:
        - Statement
      summary: Returns the statement with the given ID.
      operationId: GetStatementById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The statement ID.
          required: true
          type: string
        - name: revision
          in: query
          description: The statement revision.
          required: false
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Statement'
    delete:
      tags:
        - Statement
      summary: Delete the statement; the supplied ID must exist. Return an error if there are depending model elements.
      operationId: DeleteStatement
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          type: string
        - name: revision
          in: query
          description: ''
          required: false
          type: string
        - name: mode
          in: query
          description: '?mode=forced results in deleting all directly and indirectly depending model elements.'
          required: false
          type: string
      responses:
        '200':
          description: Success
  '/specif/v1.0/statements/{id}/revisions':
    get:
      tags:
        - Statement
      summary: Returns all available revisions for the statement wit the given ID.
      operationId: GetAllStatementRevisions
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The statement id.
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            uniqueItems: false
            type: array
            items:
              $ref: '#/definitions/Resource'
        '400':
          description: Bad Request
        '404':
          description: Not Found
  /specif/v1.0/statementClasses:
    get:
      tags:
        - StatementClass
      summary: Returns all statement classes with all available revisions.
      operationId: GetAllStatementClasses
      consumes: []
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: Success
          schema:
            uniqueItems: false
            type: array
            items:
              $ref: '#/definitions/Resource'
        '400':
          description: Bad Request
        '404':
          description: Not Found
    put:
      tags:
        - StatementClass
      summary: "Update a statement class.\r\nThe subjected ID must exist."
      operationId: UpdateStatementClass
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters:
        - name: statementClass
          in: body
          description: The statement class data.
          required: false
          schema:
            $ref: '#/definitions/Resource'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/StatementClass'
    post:
      tags:
        - StatementClass
      summary: Create a new statement class.
      operationId: CreateStatementClass
      consumes:
        - application/json-patch+json
        - application/json
        - text/json
        - application/*+json
      produces:
        - application/json
      parameters:
        - name: statementClass
          in: body
          description: The statement class data.
          required: false
          schema:
            $ref: '#/definitions/Resource'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/StatementClass'
  '/specif/v1.0/statementClasses/{id}':
    get:
      tags:
        - StatementClass
      summary: Returns the statement class with the given ID and revision.
      operationId: GetStatementClassById
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The statement class ID.
          required: true
          type: string
        - name: revision
          in: query
          description: The statement class revision identifier.
          required: false
          type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/StatementClass'
        '400':
          description: Bad Request
        '404':
          description: Not Found
    delete:
      tags:
        - StatementClass
      summary: Delete a statement class with the given ID.
      operationId: DeleteStatementClass
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The statement class ID.
          required: true
          type: string
        - name: revision
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Success
  '/specif/v1.0/statementClasses/{id}/revisions':
    get:
      tags:
        - StatementClass
      summary: Returns all statement class revisions for the given id.
      operationId: GetAllStatementClassRevisions
      consumes: []
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          type: string
      responses:
        '200':
          description: Success
          schema:
            uniqueItems: false
            type: array
            items:
              $ref: '#/definitions/StatementClass'
definitions:
  DataType:
    type: object
    properties:
      id:
        type: string
      title:
        type: object
      description:
        type: object
      revision:
        type: string
      replaces:
        uniqueItems: false
        type: array
        items:
          type: string
      type:
        type: string
      maxLength:
        format: int32
        type: integer
      fractionDigits:
        format: int32
        type: integer
      minInclusive:
        format: int32
        type: integer
      maxInclusive:
        format: int32
        type: integer
      values:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/EnumValue'
      multiple:
        type: boolean
      changedAt:
        format: date-time
        type: string
      changedBy:
        type: string
  EnumValue:
    type: object
    properties:
      id:
        type: string
      value:
        type: object
  File:
    type: object
    properties:
      id:
        type: string
      title:
        type: object
      description:
        type: object
      revision:
        type: string
      replaces:
        uniqueItems: false
        type: array
        items:
          type: string
      type:
        type: string
      changedAt:
        format: date-time
        type: string
      changedBy:
        type: string
  IFormFile:
    type: object
    properties:
      contentType:
        type: string
        readOnly: true
      contentDisposition:
        type: string
        readOnly: true
      headers:
        type: object
        additionalProperties:
          uniqueItems: false
          type: array
          items:
            type: string
        readOnly: true
      length:
        format: int64
        type: integer
        readOnly: true
      name:
        type: string
        readOnly: true
      fileName:
        type: string
        readOnly: true
  Node:
    type: object
    properties:
      id:
        type: string
      title:
        type: object
      description:
        type: object
      revision:
        type: string
      replaces:
        uniqueItems: false
        type: array
        items:
          type: string
      resource:
        type: object
      nodes:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/Node'
      changedAt:
        format: date-time
        type: string
      changedBy:
        type: string
  ProjectDescriptor:
    type: object
    properties:
      $schema:
        type: object
      id:
        type: string
      title:
        type: object
      description:
        type: object
      isExtension:
        type: boolean
      generator:
        type: string
      generatorVersion:
        type: string
      rights:
        $ref: '#/definitions/Rights'
      createdAt:
        format: date-time
        type: string
      createdBy:
        $ref: '#/definitions/Creator'
  Rights:
    type: object
    properties:
      title:
        type: string
      type:
        type: string
      url:
        type: string
  Creator:
    type: object
    properties:
      familyName:
        type: string
      givenName:
        type: string
      org:
        $ref: '#/definitions/Org'
      email:
        $ref: '#/definitions/Email'
  Org:
    type: object
    properties:
      organizationName:
        type: string
  Email:
    type: object
    properties:
      type:
        type: string
      value:
        type: string
  SpecIF:
    type: object
    properties:
      $schema:
        type: object
      id:
        type: string
      title:
        type: object
      description:
        type: object
      isExtension:
        type: boolean
      generator:
        type: string
      generatorVersion:
        type: string
      rights:
        $ref: '#/definitions/Rights'
      createdAt:
        format: date-time
        type: string
      createdBy:
        $ref: '#/definitions/Creator'
      dataTypes:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/DataType'
      propertyClasses:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/PropertyClass'
      resourceClasses:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/ResourceClass'
      statementClasses:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/StatementClass'
      resources:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/Resource'
      statements:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/Statement'
      hierarchies:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/Node'
      files:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/File'
  PropertyClass:
    type: object
    properties:
      id:
        type: string
      title:
        type: object
      description:
        type: object
      revision:
        type: string
      replaces:
        uniqueItems: false
        type: array
        items:
          type: string
      dataType:
        $ref: '#/definitions/Key'
      multiple:
        type: boolean
      changedAt:
        format: date-time
        type: string
      changedBy:
        type: string
  ResourceClass:
    type: object
    properties:
      id:
        type: string
      title:
        type: object
      description:
        type: object
      revision:
        type: string
      replaces:
        uniqueItems: false
        type: array
        items:
          type: string
      extends:
        $ref: '#/definitions/Key'
      icon:
        type: string
      isHeading:
        type: boolean
      instantiation:
        uniqueItems: false
        type: array
        items:
          type: string
      propertyClasses:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/Key'
      changedAt:
        format: date-time
        type: string
      changedBy:
        type: string
  StatementClass:
    type: object
    properties:
      id:
        type: string
      title:
        type: object
      description:
        type: object
      revision:
        type: string
      replaces:
        uniqueItems: false
        type: array
        items:
          type: string
      extends:
        $ref: '#/definitions/Key'
      icon:
        type: string
      instantiation:
        uniqueItems: false
        type: array
        items:
          type: string
      propertyClasses:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/Key'
      subjectClasses:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/Key'
      objectClasses:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/Key'
      changedAt:
        format: date-time
        type: string
      changedBy:
        type: string
  Resource:
    type: object
    properties:
      id:
        type: string
      title:
        type: object
      description:
        type: object
      class:
        $ref: '#/definitions/Key'
      language:
        type: string
      properties:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/Property'
      revision:
        type: string
      replaces:
        uniqueItems: false
        type: array
        items:
          type: string
      alternativeIds:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/AlternativeId'
      changedAt:
        format: date-time
        type: string
      changedBy:
        type: string
  Statement:
    type: object
    properties:
      id:
        type: string
      title:
        type: object
      description:
        type: object
      class:
        $ref: '#/definitions/Key'
      language:
        type: string
      properties:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/Property'
      revision:
        type: string
      replaces:
        uniqueItems: false
        type: array
        items:
          type: string
      alternativeIds:
        uniqueItems: false
        type: array
        items:
          $ref: '#/definitions/AlternativeId'
      subject:
        $ref: '#/definitions/Key'
      object:
        $ref: '#/definitions/Key'
      changedAt:
        format: date-time
        type: string
      changedBy:
        type: string
  Key:
    type: object
    properties:
      id:
        type: string
      revision:
        type: string
  Property:
    type: object
    properties:
      id:
        type: string
      value:
        type: object
      title:
        type: object
      description:
        type: object
      class:
        $ref: '#/definitions/Key'
      revision:
        type: string
      replaces:
        uniqueItems: false
        type: array
        items:
          type: string
      changedAt:
        format: date-time
        type: string
      changedBy:
        type: string
  AlternativeId:
    type: object
    properties: {}
securityDefinitions:
  Bearer:
    name: Authorization
    in: header
    type: apiKey
    description: 'JWT Authorization header using the Bearer scheme. Example: "Authorization: Bearer {token}"'
security:
  - Bearer: []
tags: []
