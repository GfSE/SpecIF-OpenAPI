openapi: 3.0.3
info:
  title: SpecIF Web API
  description: Web API for the Specification Integration Facility (SpecIF).
  contact:
    name: The SpecIF team at Gesellschaft f√ºr Systems Engineering (GfSE) e.V.
    url: https://specif.de
  license:
    name: Apache License 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0
  version: v1.1
paths:
  /specif/v1.1/dataTypes:
    get:
      tags:
        - DataType
      summary: Returns all data types with all available revisions.
      responses:
        '200':
          description: List of data types successfully returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataType'
    post:
      tags:
        - DataType
      summary: Creates a data type.
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/DataType'
          application/json:
            schema:
              $ref: '#/components/schemas/DataType'
          text/json:
            schema:
              $ref: '#/components/schemas/DataType'
          application/*+json:
            schema:
              $ref: '#/components/schemas/DataType'
      responses:
        '201':
          description: dataType created
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
        '409':
          description: Identifier exists already
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
    put:
      tags:
        - DataType
      summary: Update the data type; the supplied ID must exist.
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/DataType'
          application/json:
            schema:
              $ref: '#/components/schemas/DataType'
          text/json:
            schema:
              $ref: '#/components/schemas/DataType'
          application/*+json:
            schema:
              $ref: '#/components/schemas/DataType'
      responses:
        '200':
          description: dataType updated
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
        '404':
          description: Not Found
  /specif/v1.1/dataTypes/{id}:
    get:
      tags:
        - DataType
      summary: Returns a data type with the given ID.
      parameters:
        - name: id
          in: path
          description: The data type ID.
          required: true
          schema:
            type: string
            description: The data type ID.
            nullable: true
        - name: revision
          in: query
          description: The data type revision ID.
          schema:
            type: string
            description: The data type revision ID.
            nullable: true
      responses:
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - DataType
      summary: "Deletes the data type; the supplied ID must exist. \r\nReturns an error if there are dependant model elements."
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
        - name: revision
          in: query
          description: ''
          schema:
            type: string
            description: ''
            nullable: true
        - name: mode
          in: query
          description: Delete mode. ?mode=forced results in deleting all directly and indirectly dependant model elements.
          schema:
            type: string
            description: Delete mode. ?mode=forced results in deleting all directly and indirectly dependant model elements.
            nullable: true
      responses:
        '200':
          description: data type deleted.
        '404':
          description: Not Found
        '409':
          description: data type is referenced.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
  /specif/v1.1/dataTypes/{id}/revisions:
    get:
      tags:
        - DataType
      summary: Returns all data type revisions for the given ID.
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataType'
  /specif/v1.1/files:
    get:
      tags:
        - File
      summary: Get all file descriptors.
      parameters:
        - name: project
          in: query
          description: Filter file descriptors by project with the given Id.
          schema:
            type: string
            description: An optional project ID as filter.
            nullable: true
      responses:
        '200':
          description: List of file descriptors returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/File'
    post:
      tags:
        - File
      summary: Create (upload) the file; the supplied id and filename must be unique. The filename may contain a path with '/' as separators. If no id or filename is supplied, it is created before insertion. Upon upload, a SpecIF file descriptor is automatically generated.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                id:
                  type: string
                file:
                  type: string
                  format: binary
            encoding:
              file:
                style: form
      responses:
        '201':
          description: file created
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
        '409':
          description: Filename exists already
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
    put:
      tags:
        - File
      summary: Update (upload) the file; the supplied id and filename must exist. The filename may contain a path with '/' as separators. Upon upload, the SpecIF file descriptor is automatically updated. 
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                id:
                  type: string
                file:
                  type: string
                  format: binary
            encoding:
              file:
                style: form
      responses:
        '200':
          description: file updated
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
        '404':
          description: Not Found
  /specif/v1.1/files/{id}:
    get:
      tags:
        - File
      summary: Get the file descriptor including the file name = relative url.
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
        - name: revision
          in: query
          description: ''
          schema:
            type: string
            description: ''
            nullable: true
      responses:
        '200':
          description: Success
    delete:
      tags:
        - File
      summary: Delete the file descriptor and the file; returns an error if there are referencing elements.
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            $ref: '#/components/schemas/SpecifId'
        - name: forced
          in: query
          description: Query ?forced=true results in deleting all directly and indirectly referencing elements.
          schema:
            type: boolean
      responses:
        '200':
          description: file descriptor deleted.
        '404':
          description: Not Found
        '409':
          description: file or file descriptor is referenced.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
  /specif/v1.1/files/{id}/revisions:
    get:
      tags:
        - File
      summary: Returns all available file revisions as SpecIF file descriptions.
      parameters:
        - name: id
          in: path
          description: The file ID.
          required: true
          schema:
            type: string
            description: The file ID.
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/File'
  /specif/v1.1/hierarchies:
    get:
      tags:
        - Hierarchy
      summary: Gets all hierarchies.
      parameters:
        - name: project
          in: query
          description: Filter hierarchies by project with the given Id.
          schema:
            $ref: '#/components/schemas/SpecifId'
        - name: rootNodesOnly
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpecifNodes'
    post:
      tags:
        - Hierarchy
      summary: "Creates a hierarchy (sub-tree) with supplied nodes; the supplied ID must be unique. \r\nIf no ID is supplied, it is created before insertion. \r\nQuery ?parent=nodeId - the sub-tree will be inserted as first child; \r\nquery ?predecessor=nodeId - the sub-tree will be inserted after the specified node; \r\nno query - the sub-tree will be inserted as first element at root level. \r\nWithout query string, the node (sub-tree) is inserted as first element at root level."
      parameters:
        - name: parent
          in: query
          description: An optional parent node ID. The sub-tree will be inserted as first child.
          schema:
            type: string
            description: An optional parent node ID. The sub-tree will be inserted as first child.
        - name: predecessor
          in: query
          description: An optional predecessor node ID. The sub-tree will be inserted after the specified node.
          schema:
            type: string
            description: An optional predecessor node ID. The sub-tree will be inserted after the specified node.
        - name: projectId
          in: query
          description: "The project ID. If the ID is given, the new hierarchy will be added to the specific project. \r\n            Only useful for new hierarchies - no parent or predecessor given."
          schema:
            type: string
            description: The project ID. If the ID is given, the new hierarchy will be added to the specific project. Only useful for new hierarchies - no parent or predecessor given.
      requestBody:
        description: The hierarchy data to add.
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/Node'
          application/json:
            schema:
              $ref: '#/components/schemas/Node'
          text/json:
            schema:
              $ref: '#/components/schemas/Node'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Node'
      responses:
        '201':
          description: hierarchy created
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
        '409':
          description: Identifier exists already
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
    put:
      tags:
        - Hierarchy
      summary: "Updates an existing hierarchy node.\r\nThe supplied ID must exist somewhere in any hierarchy. \r\nQuery ?parent=nodeId - the sub-tree will be moved and inserted as first child; \r\nquery ?predecessor=nodeId - the sub-tree will be moved and inserted after the specified node. \r\nWithout query string, the node (sub-tree) is not moved."
      parameters:
        - name: parent
          in: query
          description: An optional parent node ID. The sub-tree will be inserted as first child.
          schema:
            type: string
            description: An optional parent node ID. The sub-tree will be inserted as first child.
        - name: predecessor
          in: query
          description: An optional predecessor node ID. The sub-tree will be inserted after the specified node.
          schema:
            type: string
            description: An optional predecessor node ID. The sub-tree will be inserted after the specified node.
      requestBody:
        description: ''
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/Node'
          application/json:
            schema:
              $ref: '#/components/schemas/Node'
          text/json:
            schema:
              $ref: '#/components/schemas/Node'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Node'
      responses:
        '200':
          description: hierarchy node updated
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
        '404':
          description: Not Found
  /specif/v1.1/hierarchies/{id}:
    get:
      tags:
        - Hierarchy
      summary: Gets a hierarchy with a specific ID.
      parameters:
        - name: id
          in: path
          description: The hierarchy ID.
          required: true
          schema:
            type: string
            description: The hierarchy ID.
            nullable: true
        - name: revision
          in: query
          description: The hierarchy revision.
          schema:
            type: string
            description: The hierarchy revision.
            nullable: true
        - name: depth
          in: query
          description: The maximum depth of child nodes to return. If not set the complete hierarchy depth is returned.
          schema:
            type: integer
            description: The maximum depth of child nodes to return. If not set the complete hierarchy depth is returned.
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
    delete:
      tags:
        - Hierarchy
      summary: Deletes a hierarchy.
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
        - name: revision
          in: query
          description: ''
          schema:
            type: string
            description: ''
            nullable: true
      responses:
        '200':
          description: Success
  /specif/v1.1/hierarchies/{id}/revisions:
    get:
      tags:
        - Hierarchy
      summary: Gets all revisions from a hierarchy with a specific ID.
      parameters:
        - name: id
          in: path
          description: The hierarchy ID.
          required: true
          schema:
            type: string
            description: The hierarchy ID.
            nullable: true
        - name: depth
          in: query
          description: The maximum depth of child nodes to return. If not set the complete hierarchy depth is returned.
          schema:
            type: integer
            description: The maximum depth of child nodes to return. If not set the complete hierarchy depth is returned.
            format: int32
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Node'
  /specif/v1.1/projects:
    get:
      tags:
        - Project
      summary: Get all projects; to limit the size only dataTypes, propertyClasses, resourceClasses, statementClasses and hierarchy root properties are delivered.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SpecifProject'
    post:
      tags:
        - Project
      summary: Create the project; the supplied ID must be unique. If no ID is supplied, it is created before insertion. To limit the size of the request body, it is advised to send only dataTypes, propertyClasses, resourceClasses, statementClasses and hierarchy root properties at first and to post resources, statements and hierarchies subsequently.
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/SpecIF'
          application/json:
            schema:
              $ref: '#/components/schemas/SpecIF'
          text/json:
            schema:
              $ref: '#/components/schemas/SpecIF'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SpecIF'
      responses:
        '201':
          description: project created
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
        '409':
          description: Identifier exists already
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
    put:
      tags:
        - Project
      summary: Update the project; the supplied ID must exist. To limit the size of the request body, it is advised to send only dataTypes, propertyClasses, resourceClasses, statementClasses and hierarchy root properties at first and to post resources, statements and hierarchies subsequently. Any existing elements will be updated, any additional elements will be created and any missing elements will be deleted.
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/SpecIF'
          application/json:
            schema:
              $ref: '#/components/schemas/SpecIF'
          text/json:
            schema:
              $ref: '#/components/schemas/SpecIF'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SpecIF'
      responses:
        '200':
          description: project updated
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
        '404':
          description: Not Found
  /specif/v1.1/projects/{id}:
    get:
      tags:
        - Project
      summary: Returns the project with the given ID.
      parameters:
        - name: id
          in: path
          description: The project ID.
          required: true
          schema:
            type: string
            description: The project ID.
            nullable: true
        - name: hierarchyFilter
          in: query
          description: An optional comma seperated list of hierarchy root node IDs to limit the output of selected hierarchies.
          schema:
            type: string
            description: An optional comma seperated list of hierarchy root node IDs to limit the output of selected hierarchies.
            nullable: true
        - name: includeMetedata
          in: query
          description: Set to true if the metadata should be included (e.g. resource classes etc.)
          schema:
            type: boolean
            description: Set to true if the metadata should be included (e.g. resource classes etc.)
            default: true
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpecIF'
    delete:
      tags:
        - Project
      summary: Deletes a project with the given ID.
      parameters:
        - name: id
          in: path
          description: The ID of the project to delete.
          required: true
          schema:
            type: string
            description: The ID of the project to delete.
            nullable: true
      responses:
        '200':
          description: Success
  /specif/v1.1/propertyClasses:
    get:
      tags:
        - PropertyClass
      summary: Returns all property classes with all available revisions.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PropertyClass'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    post:
      tags:
        - PropertyClass
      summary: Creates a new property class.
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/PropertyClass'
          application/json:
            schema:
              $ref: '#/components/schemas/PropertyClass'
          text/json:
            schema:
              $ref: '#/components/schemas/PropertyClass'
          application/*+json:
            schema:
              $ref: '#/components/schemas/PropertyClass'
      responses:
        '201':
          description: property class created
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
        '409':
          description: Identifier exists already
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
    put:
      tags:
        - PropertyClass
      summary: Update the property class; the supplied ID must exist.
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/SpecifPropertyClass'
          application/json:
            schema:
              $ref: '#/components/schemas/SpecifPropertyClass'
          text/json:
            schema:
              $ref: '#/components/schemas/SpecifPropertyClass'
          application/*+json:
            schema:
              $ref: '#/components/schemas/SpecifPropertyClass'
      responses:
        '200':
          description: property class updated
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
        '404':
          description: Not Found
  /specif/v1.1/propertyClasses/{id}:
    get:
      tags:
        - PropertyClass
      summary: Returns the property class with the given ID.
      parameters:
        - name: id
          in: path
          description: The property class ID.
          required: true
          schema:
            type: string
            description: The property class ID.
            nullable: true
        - name: revision
          in: query
          description: The property class revsion.
          schema:
            type: string
            description: The property class revsion.
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyClass'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - PropertyClass
      summary: "Deletes the property class; the supplied ID must exist. \r\nReturns an error if there are dependant model elements."
      parameters:
        - name: id
          in: path
          description: The property class ID.
          required: true
          schema:
            type: string
            description: The property class ID.
            nullable: true
        - name: revision
          in: query
          description: The property class revision.
          schema:
            type: string
            description: The property class revision.
            nullable: true
        - name: mode
          in: query
          description: Delete mode. ?mode=forced results in deleting all directly and indirectly dependant model elements.
          schema:
            type: string
            description: Delete mode. ?mode=forced results in deleting all directly and indirectly dependant model elements.
            nullable: true
      responses:
        '200':
          description: property class deleted.
        '404':
          description: Not Found
        '409':
          description: property class is referenced.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
  /specif/v1.1/propertyClasses/{id}/revisions:
    get:
      tags:
        - PropertyClass
      summary: Returns all property class revisions for the given ID.
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PropertyClass'
  /specif/v1.1/resources:
    get:
      tags:
        - Resource
      summary: Returns all resources with all available revisions.
      parameters:
        - name: project
          in: query
          description: Filter resources by project with the given Id.
          schema:
            $ref: '#/components/schemas/SpecifId'
        - name: class
          in: query
          description: Filter resources belonging to a class with the given Id.
          schema:
            $ref: '#/components/schemas/SpecifKey'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Resource'
    post:
      tags:
        - Resource
      summary: Adds a new resource to the SpecIF repository.
      parameters:
        - name: projectID
          in: query
          description: The optional project ID. If a project ID is not given, the data is added to a default project.
          schema:
            type: string
            description: The optional project ID. If a project ID is not given, the data is added to a default project.
            nullable: true
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/Resource'
          application/json:
            schema:
              $ref: '#/components/schemas/Resource'
          text/json:
            schema:
              $ref: '#/components/schemas/Resource'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Resource'
      responses:
        '201':
          description: resource created
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
        '409':
          description: Identifier exists already
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
    put:
      tags:
        - Resource
      summary: Update the resource; the supplied ID must exist.
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/Resource'
          application/json:
            schema:
              $ref: '#/components/schemas/Resource'
          text/json:
            schema:
              $ref: '#/components/schemas/Resource'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Resource'
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
        '404':
          description: Not Found
  /specif/v1.1/resources/{id}:
    get:
      tags:
        - Resource
      summary: Returns the latest version of the resource with the given ID.
      parameters:
        - name: id
          in: path
          description: The resource ID.
          required: true
          schema:
            type: string
            description: The resource ID.
            nullable: true
        - name: revision
          in: query
          description: The resource revision.
          schema:
            type: string
            description: The resource revision.
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
    delete:
      tags:
        - Resource
      summary: Deletes the resource.
      parameters:
        - name: id
          in: path
          description: The resource ID.
          required: true
          schema:
            type: string
            description: The resource ID.
            nullable: true
        - name: revision
          in: query
          description: The resource revision.
          schema:
            type: string
            description: The resource revision.
            nullable: true
        - name: mode
          in: query
          description: '?mode=forced results in deleting all directly and indirectly dependant model elements.'
          schema:
            type: string
            description: '?mode=forced results in deleting all directly and indirectly dependant model elements.'
            nullable: true
      responses:
        '200':
          description: resource deleted.
        '404':
          description: Not Found
        '409':
          description: resource is referenced.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
  /specif/v1.1/resources/{id}/revisions:
    get:
      tags:
        - Resource
      summary: Returns a list of all revisions for the resource with the given ID.
      parameters:
        - name: id
          in: path
          description: The resource ID.
          required: true
          schema:
            type: string
            description: The resource ID.
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SpecifResource'
        '404':
          description: Not Found
  /specif/v1.1/resources/{id}/statements:
    get:
      tags:
        - Resource
      summary: Get all statements of the resource.
      parameters:
        - name: id
          in: path
          description: The resource ID.
          required: true
          schema:
            $ref: '#/components/schemas/SpecifId'
      responses:
        '200':
          description: All statements of the resource returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SpecifStatement'
        '404':
          description: Not Found
  /specif/v1.1/resourceClasses:
    get:
      tags:
        - ResourceClass
      summary: Get all resource classes.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResourceClass'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    post:
      tags:
        - ResourceClass
      summary: Creates a new resource class.
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/ResourceClass'
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceClass'
          text/json:
            schema:
              $ref: '#/components/schemas/ResourceClass'
          application/*+json:
            schema:
              $ref: '#/components/schemas/ResourceClass'
      responses:
        '201':
          description: resource class created
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
        '409':
          description: Identifier exists already
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
    put:
      tags:
        - ResourceClass
      summary: Update the resource class; the supplied ID must exist.
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/Resource'
          application/json:
            schema:
              $ref: '#/components/schemas/Resource'
          text/json:
            schema:
              $ref: '#/components/schemas/Resource'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Resource'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
        '404':
          description: Not Found
  /specif/v1.1/resourceClasses/{id}:
    get:
      tags:
        - ResourceClass
      summary: Returns the resource class with the given ID.
      parameters:
        - name: id
          in: path
          description: The resource class ID.
          required: true
          schema:
            type: string
            description: The resource class ID.
            nullable: true
        - name: revision
          in: query
          description: The resource class revision.
          schema:
            type: string
            description: The resource class revision.
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceClass'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - ResourceClass
      summary: Deletes a resource class with the given ID.
      parameters:
        - name: id
          in: path
          description: The resource class ID.
          required: true
          schema:
            type: string
            description: The resource class ID.
            nullable: true
        - name: revision
          in: query
          description: The revision ID.
          schema:
            type: string
            description: The revision ID.
            nullable: true
      responses:
        '200':
          description: resource class deleted.
        '404':
          description: Not Found
        '409':
          description: resource class is referenced.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
  /specif/v1.1/resourceClasses/{id}/revisions:
    get:
      tags:
        - ResourceClass
      summary: Returns all resource class revisions for the given ID.
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ResourceClass'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /specif/v1.1/statements:
    get:
      tags:
        - Statement
      summary: "Returns all statements with all available revisions.\r\nWith the optional project ID only the statements for the project are returned."
      parameters:
        - name: project
          in: query
          description: Filter statements by project with the given Id.
          schema:
            $ref: '#/components/schemas/SpecifId'
        - name: class
          in: query
          description: Filter statements belonging to a class with the given Id.
          schema:
            $ref: '#/components/schemas/SpecifKey'
        - name: element
          in: query
          description: Filter statements where the element with the given Id is a subject or an object.
          schema:
            $ref: '#/components/schemas/SpecifKey'
        - name: subject
          in: query
          description: Filter statements where the element with the given Id is a subject.
          schema:
            $ref: '#/components/schemas/SpecifKey'
        - name: object
          in: query
          description: Filter statements where the element with the given Id is an object.
          schema:
            $ref: '#/components/schemas/SpecifKey'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Statement'
    post:
      tags:
        - Statement
      summary: Creates a statement; the supplied ID must be unique in the project scope.
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/Statement'
          application/json:
            schema:
              $ref: '#/components/schemas/Statement'
          text/json:
            schema:
              $ref: '#/components/schemas/Statement'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Statement'
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
        '409':
          description: Identifier exists already
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
    put:
      tags:
        - Statement
      summary: Update the statement; the supplied ID must exist.
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/Statement'
          application/json:
            schema:
              $ref: '#/components/schemas/Statement'
          text/json:
            schema:
              $ref: '#/components/schemas/Statement'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Statement'
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Statement'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
        '404':
          description: Not Found
  /specif/v1.1/statements/{id}:
    get:
      tags:
        - Statement
      summary: Returns the statement with the given ID.
      parameters:
        - name: id
          in: path
          description: The statement ID.
          required: true
          schema:
            type: string
            description: The statement ID.
            nullable: true
        - name: revision
          in: query
          description: The statement revision.
          schema:
            type: string
            description: The statement revision.
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Statement'
    delete:
      tags:
        - Statement
      summary: Deletes the statement; the supplied ID must exist. Returns an error if there are dependant model elements.
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
        - name: revision
          in: query
          description: ''
          schema:
            type: string
            description: ''
            nullable: true
        - name: mode
          in: query
          description: '?mode=forced results in deleting all directly and indirectly dependant model elements.'
          schema:
            type: string
            description: '?mode=forced results in deleting all directly and indirectly dependant model elements.'
            nullable: true
      responses:
        '200':
          description: Success
  /specif/v1.1/statements/{id}/revisions:
    get:
      tags:
        - Statement
      summary: Returns all available revisions for the statement with the given ID.
      parameters:
        - name: id
          in: path
          description: The statement ID.
          required: true
          schema:
            type: string
            description: The statement ID.
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Resource'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /specif/v1.1/statementClasses:
    get:
      tags:
        - StatementClass
      summary: Returns all statement classes with all available revisions.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Resource'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    post:
      tags:
        - StatementClass
      summary: Creates a new statement class.
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/Resource'
          application/json:
            schema:
              $ref: '#/components/schemas/Resource'
          text/json:
            schema:
              $ref: '#/components/schemas/Resource'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Resource'
      responses:
        '201':
          description: statement class created
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
        '409':
          description: Identifier exists already
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
    put:
      tags:
        - StatementClass
      summary: Update the statement class; the supplied ID must exist.
      requestBody:
        content:
          application/json-patch+json:
            schema:
              $ref: '#/components/schemas/Resource'
          application/json:
            schema:
              $ref: '#/components/schemas/Resource'
          text/json:
            schema:
              $ref: '#/components/schemas/Resource'
          application/*+json:
            schema:
              $ref: '#/components/schemas/Resource'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
        '404':
          description: Not Found
  /specif/v1.1/statementClasses/{id}:
    get:
      tags:
        - StatementClass
      summary: Returns the statement class with the given ID and revision.
      parameters:
        - name: id
          in: path
          description: The statement class ID.
          required: true
          schema:
            type: string
            description: The statement class ID.
            nullable: true
        - name: revision
          in: query
          description: The statement class revision identifier.
          schema:
            type: string
            description: The statement class revision identifier.
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatementClass'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
    delete:
      tags:
        - StatementClass
      summary: Deletes a statement class with the given ID.
      parameters:
        - name: id
          in: path
          description: The statement class ID.
          required: true
          schema:
            type: string
            description: The statement class ID.
            nullable: true
        - name: revision
          in: query
          description: The statement revision ID.
          schema:
            type: string
            description: The statement revision ID.
            nullable: true
      responses:
        '200':
          description: statement class deleted.
        '404':
          description: Not Found
        '409':
          description: statement class is referenced.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpStatusDetails'
  /specif/v1.1/statementClasses/{id}/revisions:
    get:
      tags:
        - StatementClass
      summary: Returns all statement class revisions for the given ID.
      parameters:
        - name: id
          in: path
          description: ''
          required: true
          schema:
            type: string
            description: ''
            nullable: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StatementClass'
components:
  schemas:
    SpecifId:
      description: "A globally unique identifier."
      type: string
      pattern: "^[_a-zA-Z]{1}[_a-zA-Z0-9.-]*$"
    SpecifRevision:
      description: "A globally unique revision tag with one or multiple blocks with alphanumeric characters separated by a special character [.:,;/-]. Sequential as well as branching/merging notations are possible."
      type: string
      pattern: "^(?:[0-9a-zA-Z]+[.:,;\/-])*[0-9a-zA-Z]+$"
    SpecifReplaces:
      description: "For change and configuration management; the first revision has 0 entries, a simple modification has 1 entry and the result of a merge has 2 entries."
      type: array
      maxItems: 2
      uniqueItems: true
      items:
        $ref: "#/components/SpecifRevision"
    SpecifKey:
      description: "A key for a particular revision of an identifiable item, e.g. of a resource. A key consists of a globally unique identifier and a revision. No or an undefined revision means the latest revision of the identified item."
      type: object
      properties:
        id:
          $ref: '#/components/schemas/SpecifId'
        revision:
          $ref: '#/components/schemas/SpecifRevision'
      additionalProperties: false
      required:
        - id
    SpecifKeys:
      description: "A list of keys referencing items such as propertyClasses, resourceClasses or statementClasses; any list must have >0 entries including those of any parent element."
      type: array
      uniqueItems: true
      items:
        $ref: "#/components/SpecifKey"
    SpecifAlternativeId:
      description: "A list of pointers to resources resp. statements which have been merged to this one."
      type: object
      properties:
        id:
          $ref: '#/components/schemas/SpecifId'
        revision:
          $ref: '#/components/schemas/SpecifRevision'
        project:
          $ref: '#/components/schemas/SpecifId'
      additionalProperties: false
      required:
        - id
    SpecifAlternativeIds:
      description: "The list of consolidated items to be used in case a consolidated item shall be updated."
      type: array
      uniqueItems: true
      items:
        $ref: "#/components/SpecifAlternativeId"
    SpecifText:
      type: string
    SpecifTextFormat:
      type: string
      enum: 
        - plain
        - xhtml
    SpecifLanguageText:
      type: object
      properties:
        text:
          type: string
          nullable: true
        format:
          type: string
          nullable: true
        language:
          type: string
          nullable: true
      additionalProperties: false
      required:
        - text
    SpecifMultiLanguageText:
      type: array
      items:
        $ref: '#/components/schemas/SpecifLanguageText'
    SpecifValue:
      description: "First option for properties with dataType 'xs:string', second option for all others. Note that SpecIF represents *all* values including number and boolean as string."
      oneOf:
        - $ref: "#/components/SpecifMultiLanguageText"
        - type: string
    SpecifValues:
      description: "If 'multiple' of the propertyClass is undefined or false, the array must contain one item. If the value is unknown, omit the whole property. By default, the class' value applies."
      type: array
      minItems: 1
      uniqueItems: true
      items:
        $ref: '#/components/schemas/SpecifValue'
    SpecifEnumeratedValue:
      type: object
      properties:
        id:
          type: string
          nullable: true
        value:
          type: array
          items:
            $ref: '#/components/schemas/MultilanguageText'
          nullable: true
      additionalProperties: false
    DataType:
      type: object
      properties:
        id:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        description:
          type: array
          items:
            $ref: '#/components/schemas/MultilanguageText'
          nullable: true
        revision:
          type: string
          nullable: true
        replaces:
          type: array
          items:
            type: string
          nullable: true
        type:
          type: string
          nullable: true
        maxLength:
          type: integer
          format: int32
          nullable: true
        fractionDigits:
          type: integer
          format: int32
          nullable: true
        minInclusive:
          type: integer
          format: int32
          nullable: true
        maxInclusive:
          type: integer
          format: int32
          nullable: true
        enumeration:
          type: array
          items:
            $ref: '#/components/schemas/EnumerationValue'
          nullable: true
        multiple:
          type: boolean
          nullable: true
        changedAt:
          type: string
          format: date-time
        changedBy:
          type: string
          nullable: true
      additionalProperties: false
    ProblemDetails:
      type: object
      properties:
        type:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        status:
          type: integer
          format: int32
          nullable: true
        detail:
          type: string
          nullable: true
        instance:
          type: string
          nullable: true
      additionalProperties: {}
    File:
      type: object
      properties:
        id:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        description:
          type: array
          items:
            $ref: '#/components/schemas/MultilanguageText'
          nullable: true
        revision:
          type: string
          nullable: true
        replaces:
          type: array
          items:
            type: string
          nullable: true
        type:
          type: string
          nullable: true
        url:
          type: string
          nullable: true
        changedAt:
          type: string
          format: date-time
        changedBy:
          type: string
          nullable: true
      additionalProperties: false
    Node:
      type: object
      properties:
        id:
          type: string
          nullable: true
        title:
          type: array
          items:
            $ref: '#/components/schemas/MultilanguageText'
          nullable: true
        description:
          type: array
          items:
            $ref: '#/components/schemas/MultilanguageText'
          nullable: true
        revision:
          type: string
          nullable: true
        replaces:
          type: array
          items:
            type: string
          nullable: true
        resource:
          nullable: true
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/Node'
          nullable: true
        changedAt:
          type: string
          format: date-time
        changedBy:
          type: string
          nullable: true
      additionalProperties: false
    Rights:
      type: object
      properties:
        title:
          type: string
          nullable: true
        url:
          type: string
          nullable: true
      additionalProperties: false
    Org:
      type: object
      properties:
        organizationName:
          type: string
          nullable: true
      additionalProperties: false
    Creator:
      type: object
      properties:
        familyName:
          type: string
          nullable: true
        givenName:
          type: string
          nullable: true
        org:
          $ref: '#/components/schemas/Org'
        email:
          type: string
          nullable: true
      additionalProperties: false
    ProjectDescriptor:
      type: object
      properties:
        $schema:
          nullable: true
        id:
          type: string
          nullable: true
        title:
          type: array
          items:
            $ref: '#/components/schemas/MultilanguageText'
          nullable: true
        description:
          type: array
          items:
            $ref: '#/components/schemas/MultilanguageText'
          nullable: true
        isExtension:
          type: boolean
        generator:
          type: string
          nullable: true
        generatorVersion:
          type: string
          nullable: true
        rights:
          $ref: '#/components/schemas/Rights'
        createdAt:
          type: string
          format: date-time
        createdBy:
          $ref: '#/components/schemas/Creator'
      additionalProperties: false
    Key:
      type: object
      properties:
        id:
          type: string
          nullable: true
        revision:
          type: string
          nullable: true
      additionalProperties: false
    Value:
      type: object
      additionalProperties: false
    PropertyClass:
      type: object
      properties:
        id:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        description:
          type: array
          items:
            $ref: '#/components/schemas/MultilanguageText'
          nullable: true
        revision:
          type: string
          nullable: true
        replaces:
          type: array
          items:
            type: string
          nullable: true
        dataType:
          $ref: '#/components/schemas/Key'
        multiple:
          type: boolean
          nullable: true
        format:
          type: string
          nullable: true
        unit:
          type: string
          nullable: true
        values:
          type: array
          items:
            $ref: '#/components/schemas/Value'
          nullable: true
        changedAt:
          type: string
          format: date-time
        changedBy:
          type: string
          nullable: true
      additionalProperties: false
    ResourceClass:
      type: object
      properties:
        id:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        description:
          type: array
          items:
            $ref: '#/components/schemas/MultilanguageText'
          nullable: true
        revision:
          type: string
          nullable: true
        replaces:
          type: array
          items:
            type: string
          nullable: true
        extends:
          $ref: '#/components/schemas/Key'
        icon:
          type: string
          nullable: true
        isHeading:
          type: boolean
        instantiation:
          type: array
          items:
            type: string
          nullable: true
        propertyClasses:
          type: array
          items:
            $ref: '#/components/schemas/Key'
          nullable: true
        changedAt:
          type: string
          format: date-time
        changedBy:
          type: string
          nullable: true
      additionalProperties: false
      required:
        - id
        - resource
        - changedAt
    SpecifNodes:
      description: "A list of pointers to resources; may be nested forming a tree, i.e. a hierarchy of pointers."
      type: array
      uniqueItems: true
      items:
        $ref: "#/components/schemas/SpecifNode"
    SpecifHierarchyDepth:
      description: The number of hierarchy levels.
      type: integer
      format: int32
    SpecifFile:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/SpecifId'
        title:
          type: string
        description:
          $ref: '#/components/schemas/SpecifMultiLanguageText'
        url:
          description: "An absolute or relative URL to the file; will be of format 'uri-reference' in future. If missing, the title applies."
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        description:
          type: array
          items:
            $ref: '#/components/schemas/MultilanguageText'
          nullable: true
        revision:
          type: string
          nullable: true
        replaces:
          type: array
          items:
            type: string
          nullable: true
        subjectClasses:
          type: array
          items:
            $ref: '#/components/schemas/Key'
          nullable: true
        objectClasses:
          type: array
          items:
            $ref: '#/components/schemas/Key'
          nullable: true
        extends:
          $ref: '#/components/schemas/Key'
        icon:
          type: string
          nullable: true
        isHeading:
          type: boolean
        instantiation:
          type: array
          items:
            type: string
          nullable: true
        propertyClasses:
          type: array
          items:
            $ref: '#/components/schemas/Key'
          nullable: true
        changedAt:
          type: string
          format: date-time
        changedBy:
          type: string
          nullable: true
      additionalProperties: false
    Property:
      type: object
      properties:
        class:
          $ref: '#/components/schemas/Key'
        values:
          type: array
          items:
            $ref: '#/components/schemas/Value'
          nullable: true
      additionalProperties: false
    Resource:
      type: object
      properties:
        id:
          type: string
          nullable: true
        class:
          $ref: '#/components/schemas/Key'
        properties:
          type: array
          items:
            $ref: '#/components/schemas/Property'
          nullable: true
        revision:
          type: string
          nullable: true
        replaces:
          type: array
          items:
            type: string
          nullable: true
        alternativeIds:
          type: array
          items: {}
          nullable: true
        changedAt:
          type: string
          format: date-time
        changedBy:
          type: string
          nullable: true
      additionalProperties: false
      required:
        - email
    SpecifMetaSchema:
      type: string
      format: uri
      pattern: "^https?:\\/\\/(specif\\.de\\/v1\\.1\\/schema|json\\.schemastore\\.org\\/specif-1\\.1)\\.json$"
    SpecifProject:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/SpecifId'
        revision:
          $ref: '#/components/schemas/SpecifRevision'
        title:
          $ref: '#/components/schemas/SpecifMultiLanguageText'
        description:
          $ref: '#/components/schemas/SpecifMultiLanguageText'
        isExtension:
          type: boolean
        generator:
          type: string
          format: date-time
        changedBy:
          type: string
          nullable: true
      additionalProperties: false
    SpecIF:
      type: object
      properties:
        $schema:
          nullable: true
        id:
          type: string
          nullable: true
        title:
          $ref: '#/components/schemas/SpecifMultiLanguageText'
        description:
          $ref: '#/components/schemas/SpecifMultiLanguageText'
        isExtension:
          type: boolean
        generator:
          type: string
          nullable: true
        generatorVersion:
          type: string
          nullable: true
        rights:
          $ref: '#/components/schemas/Rights'
        createdAt:
          type: string
          format: date-time
        createdBy:
          $ref: '#/components/schemas/Creator'
        dataTypes:
          type: array
          items:
            $ref: '#/components/schemas/DataType'
          nullable: true
        propertyClasses:
          type: array
          items:
            $ref: '#/components/schemas/PropertyClass'
          nullable: true
        resourceClasses:
          type: array
          items:
            $ref: '#/components/schemas/ResourceClass'
          nullable: true
        statementClasses:
          type: array
          items:
            $ref: '#/components/schemas/StatementClass'
          nullable: true
        resources:
          type: array
          items:
            $ref: '#/components/schemas/Resource'
          nullable: true
        statements:
          type: array
          items:
            $ref: '#/components/schemas/Statement'
          nullable: true
        hierarchies:
          type: array
          items:
            $ref: '#/components/schemas/SpecifFile'
      additionalProperties: false
      required:
          - $schema
          - id
          - dataTypes
          - propertyClasses
          - resourceClasses
          - statementClasses
          - resources
          - statements
          - hierarchies
    HttpStatusDetails:
      type: object
      properties:
        type:
          type: string
          nullable: true
        title:
          type: string
          nullable: true
        status:
          type: integer
          format: int32
          nullable: true
        files:
          type: array
          items:
            $ref: '#/components/schemas/File'
          nullable: true
      additionalProperties: false
  securitySchemes:
    X-API-KEY:
      type: apiKey
      description: 'API key needed to access the endpoints. X-API-KEY: My_API_Key'
      name: X-API-KEY
      in: header
security:
  - X-API-KEY: []
